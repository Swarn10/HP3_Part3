// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto;
namespace DeepNet {
class Activation;
class ActivationDefaultTypeInternal;
extern ActivationDefaultTypeInternal _Activation_default_instance_;
class AdaptivePoolLayer2D;
class AdaptivePoolLayer2DDefaultTypeInternal;
extern AdaptivePoolLayer2DDefaultTypeInternal _AdaptivePoolLayer2D_default_instance_;
class ConvLayer2D;
class ConvLayer2DDefaultTypeInternal;
extern ConvLayer2DDefaultTypeInternal _ConvLayer2D_default_instance_;
class DropOutLayer;
class DropOutLayerDefaultTypeInternal;
extern DropOutLayerDefaultTypeInternal _DropOutLayer_default_instance_;
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class LinearLayer;
class LinearLayerDefaultTypeInternal;
extern LinearLayerDefaultTypeInternal _LinearLayer_default_instance_;
class Network;
class NetworkDefaultTypeInternal;
extern NetworkDefaultTypeInternal _Network_default_instance_;
class PoolLayer2D;
class PoolLayer2DDefaultTypeInternal;
extern PoolLayer2DDefaultTypeInternal _PoolLayer2D_default_instance_;
}  // namespace DeepNet
PROTOBUF_NAMESPACE_OPEN
template<> ::DeepNet::Activation* Arena::CreateMaybeMessage<::DeepNet::Activation>(Arena*);
template<> ::DeepNet::AdaptivePoolLayer2D* Arena::CreateMaybeMessage<::DeepNet::AdaptivePoolLayer2D>(Arena*);
template<> ::DeepNet::ConvLayer2D* Arena::CreateMaybeMessage<::DeepNet::ConvLayer2D>(Arena*);
template<> ::DeepNet::DropOutLayer* Arena::CreateMaybeMessage<::DeepNet::DropOutLayer>(Arena*);
template<> ::DeepNet::Layer* Arena::CreateMaybeMessage<::DeepNet::Layer>(Arena*);
template<> ::DeepNet::LinearLayer* Arena::CreateMaybeMessage<::DeepNet::LinearLayer>(Arena*);
template<> ::DeepNet::Network* Arena::CreateMaybeMessage<::DeepNet::Network>(Arena*);
template<> ::DeepNet::PoolLayer2D* Arena::CreateMaybeMessage<::DeepNet::PoolLayer2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DeepNet {

enum Activation_ActivationType : int {
  Activation_ActivationType_RELU = 0,
  Activation_ActivationType_SIGMOID = 1
};
bool Activation_ActivationType_IsValid(int value);
constexpr Activation_ActivationType Activation_ActivationType_ActivationType_MIN = Activation_ActivationType_RELU;
constexpr Activation_ActivationType Activation_ActivationType_ActivationType_MAX = Activation_ActivationType_SIGMOID;
constexpr int Activation_ActivationType_ActivationType_ARRAYSIZE = Activation_ActivationType_ActivationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Activation_ActivationType_descriptor();
template<typename T>
inline const std::string& Activation_ActivationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Activation_ActivationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Activation_ActivationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Activation_ActivationType_descriptor(), enum_t_value);
}
inline bool Activation_ActivationType_Parse(
    const std::string& name, Activation_ActivationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Activation_ActivationType>(
    Activation_ActivationType_descriptor(), name, value);
}
enum PoolLayer2D_PoolType : int {
  PoolLayer2D_PoolType_MAX = 0,
  PoolLayer2D_PoolType_AVG = 1
};
bool PoolLayer2D_PoolType_IsValid(int value);
constexpr PoolLayer2D_PoolType PoolLayer2D_PoolType_PoolType_MIN = PoolLayer2D_PoolType_MAX;
constexpr PoolLayer2D_PoolType PoolLayer2D_PoolType_PoolType_MAX = PoolLayer2D_PoolType_AVG;
constexpr int PoolLayer2D_PoolType_PoolType_ARRAYSIZE = PoolLayer2D_PoolType_PoolType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolLayer2D_PoolType_descriptor();
template<typename T>
inline const std::string& PoolLayer2D_PoolType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PoolLayer2D_PoolType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PoolLayer2D_PoolType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PoolLayer2D_PoolType_descriptor(), enum_t_value);
}
inline bool PoolLayer2D_PoolType_Parse(
    const std::string& name, PoolLayer2D_PoolType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PoolLayer2D_PoolType>(
    PoolLayer2D_PoolType_descriptor(), name, value);
}
enum AdaptivePoolLayer2D_PoolType : int {
  AdaptivePoolLayer2D_PoolType_MAX = 0,
  AdaptivePoolLayer2D_PoolType_AVG = 1
};
bool AdaptivePoolLayer2D_PoolType_IsValid(int value);
constexpr AdaptivePoolLayer2D_PoolType AdaptivePoolLayer2D_PoolType_PoolType_MIN = AdaptivePoolLayer2D_PoolType_MAX;
constexpr AdaptivePoolLayer2D_PoolType AdaptivePoolLayer2D_PoolType_PoolType_MAX = AdaptivePoolLayer2D_PoolType_AVG;
constexpr int AdaptivePoolLayer2D_PoolType_PoolType_ARRAYSIZE = AdaptivePoolLayer2D_PoolType_PoolType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdaptivePoolLayer2D_PoolType_descriptor();
template<typename T>
inline const std::string& AdaptivePoolLayer2D_PoolType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdaptivePoolLayer2D_PoolType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdaptivePoolLayer2D_PoolType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdaptivePoolLayer2D_PoolType_descriptor(), enum_t_value);
}
inline bool AdaptivePoolLayer2D_PoolType_Parse(
    const std::string& name, AdaptivePoolLayer2D_PoolType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdaptivePoolLayer2D_PoolType>(
    AdaptivePoolLayer2D_PoolType_descriptor(), name, value);
}
enum Layer_LayerType : int {
  Layer_LayerType_LINEAR = 0,
  Layer_LayerType_CONV = 1,
  Layer_LayerType_POOL = 2,
  Layer_LayerType_ADAPTIVE_POOL = 3,
  Layer_LayerType_DROPUT = 4,
  Layer_LayerType_ACTIVATION = 5
};
bool Layer_LayerType_IsValid(int value);
constexpr Layer_LayerType Layer_LayerType_LayerType_MIN = Layer_LayerType_LINEAR;
constexpr Layer_LayerType Layer_LayerType_LayerType_MAX = Layer_LayerType_ACTIVATION;
constexpr int Layer_LayerType_LayerType_ARRAYSIZE = Layer_LayerType_LayerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Layer_LayerType_descriptor();
template<typename T>
inline const std::string& Layer_LayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Layer_LayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Layer_LayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Layer_LayerType_descriptor(), enum_t_value);
}
inline bool Layer_LayerType_Parse(
    const std::string& name, Layer_LayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Layer_LayerType>(
    Layer_LayerType_descriptor(), name, value);
}
// ===================================================================

class ConvLayer2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeepNet.ConvLayer2D) */ {
 public:
  ConvLayer2D();
  virtual ~ConvLayer2D();

  ConvLayer2D(const ConvLayer2D& from);
  ConvLayer2D(ConvLayer2D&& from) noexcept
    : ConvLayer2D() {
    *this = ::std::move(from);
  }

  inline ConvLayer2D& operator=(const ConvLayer2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvLayer2D& operator=(ConvLayer2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConvLayer2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvLayer2D* internal_default_instance() {
    return reinterpret_cast<const ConvLayer2D*>(
               &_ConvLayer2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConvLayer2D& a, ConvLayer2D& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvLayer2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConvLayer2D* New() const final {
    return CreateMaybeMessage<ConvLayer2D>(nullptr);
  }

  ConvLayer2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConvLayer2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConvLayer2D& from);
  void MergeFrom(const ConvLayer2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvLayer2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeepNet.ConvLayer2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 9,
    kBiasFieldNumber = 11,
    kOutChannelsFieldNumber = 2,
    kInChannelsFieldNumber = 3,
    kHeightFieldNumber = 4,
    kWidthFieldNumber = 5,
    kStrideFieldNumber = 6,
    kPaddingFieldNumber = 7,
    kDilationFieldNumber = 8,
    kBiasPresentFieldNumber = 10,
  };
  // repeated float weight = 9;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  private:
  float _internal_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight() const;
  void _internal_add_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight();
  public:
  float weight(int index) const;
  void set_weight(int index, float value);
  void add_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight();

  // repeated float bias = 11;
  int bias_size() const;
  private:
  int _internal_bias_size() const;
  public:
  void clear_bias();
  private:
  float _internal_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bias() const;
  void _internal_add_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bias();
  public:
  float bias(int index) const;
  void set_bias(int index, float value);
  void add_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bias();

  // required int32 out_channels = 2;
  bool has_out_channels() const;
  private:
  bool _internal_has_out_channels() const;
  public:
  void clear_out_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 out_channels() const;
  void set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_channels() const;
  void _internal_set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 in_channels = 3;
  bool has_in_channels() const;
  private:
  bool _internal_has_in_channels() const;
  public:
  void clear_in_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 in_channels() const;
  void set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in_channels() const;
  void _internal_set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 width = 5;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 stride = 6;
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 padding = 7;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  ::PROTOBUF_NAMESPACE_ID::int32 padding() const;
  void set_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_padding() const;
  void _internal_set_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dilation = 8;
  bool has_dilation() const;
  private:
  bool _internal_has_dilation() const;
  public:
  void clear_dilation();
  ::PROTOBUF_NAMESPACE_ID::int32 dilation() const;
  void set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dilation() const;
  void _internal_set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool bias_present = 10 [default = false];
  bool has_bias_present() const;
  private:
  bool _internal_has_bias_present() const;
  public:
  void clear_bias_present();
  bool bias_present() const;
  void set_bias_present(bool value);
  private:
  bool _internal_bias_present() const;
  void _internal_set_bias_present(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DeepNet.ConvLayer2D)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bias_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 in_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 stride_;
  ::PROTOBUF_NAMESPACE_ID::int32 padding_;
  ::PROTOBUF_NAMESPACE_ID::int32 dilation_;
  bool bias_present_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class Activation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeepNet.Activation) */ {
 public:
  Activation();
  virtual ~Activation();

  Activation(const Activation& from);
  Activation(Activation&& from) noexcept
    : Activation() {
    *this = ::std::move(from);
  }

  inline Activation& operator=(const Activation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Activation& operator=(Activation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Activation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Activation* internal_default_instance() {
    return reinterpret_cast<const Activation*>(
               &_Activation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Activation& a, Activation& b) {
    a.Swap(&b);
  }
  inline void Swap(Activation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Activation* New() const final {
    return CreateMaybeMessage<Activation>(nullptr);
  }

  Activation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Activation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Activation& from);
  void MergeFrom(const Activation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Activation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeepNet.Activation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Activation_ActivationType ActivationType;
  static constexpr ActivationType RELU =
    Activation_ActivationType_RELU;
  static constexpr ActivationType SIGMOID =
    Activation_ActivationType_SIGMOID;
  static inline bool ActivationType_IsValid(int value) {
    return Activation_ActivationType_IsValid(value);
  }
  static constexpr ActivationType ActivationType_MIN =
    Activation_ActivationType_ActivationType_MIN;
  static constexpr ActivationType ActivationType_MAX =
    Activation_ActivationType_ActivationType_MAX;
  static constexpr int ActivationType_ARRAYSIZE =
    Activation_ActivationType_ActivationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActivationType_descriptor() {
    return Activation_ActivationType_descriptor();
  }
  template<typename T>
  static inline const std::string& ActivationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActivationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActivationType_Name.");
    return Activation_ActivationType_Name(enum_t_value);
  }
  static inline bool ActivationType_Parse(const std::string& name,
      ActivationType* value) {
    return Activation_ActivationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // required .DeepNet.Activation.ActivationType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::DeepNet::Activation_ActivationType type() const;
  void set_type(::DeepNet::Activation_ActivationType value);
  private:
  ::DeepNet::Activation_ActivationType _internal_type() const;
  void _internal_set_type(::DeepNet::Activation_ActivationType value);
  public:

  // @@protoc_insertion_point(class_scope:DeepNet.Activation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class PoolLayer2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeepNet.PoolLayer2D) */ {
 public:
  PoolLayer2D();
  virtual ~PoolLayer2D();

  PoolLayer2D(const PoolLayer2D& from);
  PoolLayer2D(PoolLayer2D&& from) noexcept
    : PoolLayer2D() {
    *this = ::std::move(from);
  }

  inline PoolLayer2D& operator=(const PoolLayer2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolLayer2D& operator=(PoolLayer2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolLayer2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolLayer2D* internal_default_instance() {
    return reinterpret_cast<const PoolLayer2D*>(
               &_PoolLayer2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PoolLayer2D& a, PoolLayer2D& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolLayer2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolLayer2D* New() const final {
    return CreateMaybeMessage<PoolLayer2D>(nullptr);
  }

  PoolLayer2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolLayer2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolLayer2D& from);
  void MergeFrom(const PoolLayer2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolLayer2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeepNet.PoolLayer2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PoolLayer2D_PoolType PoolType;
  static constexpr PoolType MAX =
    PoolLayer2D_PoolType_MAX;
  static constexpr PoolType AVG =
    PoolLayer2D_PoolType_AVG;
  static inline bool PoolType_IsValid(int value) {
    return PoolLayer2D_PoolType_IsValid(value);
  }
  static constexpr PoolType PoolType_MIN =
    PoolLayer2D_PoolType_PoolType_MIN;
  static constexpr PoolType PoolType_MAX =
    PoolLayer2D_PoolType_PoolType_MAX;
  static constexpr int PoolType_ARRAYSIZE =
    PoolLayer2D_PoolType_PoolType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PoolType_descriptor() {
    return PoolLayer2D_PoolType_descriptor();
  }
  template<typename T>
  static inline const std::string& PoolType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PoolType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PoolType_Name.");
    return PoolLayer2D_PoolType_Name(enum_t_value);
  }
  static inline bool PoolType_Parse(const std::string& name,
      PoolType* value) {
    return PoolLayer2D_PoolType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kKernelSizeFieldNumber = 2,
    kStrideFieldNumber = 3,
    kPaddingFieldNumber = 4,
    kDilationFieldNumber = 5,
  };
  // required .DeepNet.PoolLayer2D.PoolType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::DeepNet::PoolLayer2D_PoolType type() const;
  void set_type(::DeepNet::PoolLayer2D_PoolType value);
  private:
  ::DeepNet::PoolLayer2D_PoolType _internal_type() const;
  void _internal_set_type(::DeepNet::PoolLayer2D_PoolType value);
  public:

  // required int32 kernel_size = 2;
  bool has_kernel_size() const;
  private:
  bool _internal_has_kernel_size() const;
  public:
  void clear_kernel_size();
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size() const;
  void set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kernel_size() const;
  void _internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 stride = 3;
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 padding = 4;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  ::PROTOBUF_NAMESPACE_ID::int32 padding() const;
  void set_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_padding() const;
  void _internal_set_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 dilation = 5;
  bool has_dilation() const;
  private:
  bool _internal_has_dilation() const;
  public:
  void clear_dilation();
  ::PROTOBUF_NAMESPACE_ID::int32 dilation() const;
  void set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dilation() const;
  void _internal_set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DeepNet.PoolLayer2D)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stride_;
  ::PROTOBUF_NAMESPACE_ID::int32 padding_;
  ::PROTOBUF_NAMESPACE_ID::int32 dilation_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class AdaptivePoolLayer2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeepNet.AdaptivePoolLayer2D) */ {
 public:
  AdaptivePoolLayer2D();
  virtual ~AdaptivePoolLayer2D();

  AdaptivePoolLayer2D(const AdaptivePoolLayer2D& from);
  AdaptivePoolLayer2D(AdaptivePoolLayer2D&& from) noexcept
    : AdaptivePoolLayer2D() {
    *this = ::std::move(from);
  }

  inline AdaptivePoolLayer2D& operator=(const AdaptivePoolLayer2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdaptivePoolLayer2D& operator=(AdaptivePoolLayer2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdaptivePoolLayer2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdaptivePoolLayer2D* internal_default_instance() {
    return reinterpret_cast<const AdaptivePoolLayer2D*>(
               &_AdaptivePoolLayer2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AdaptivePoolLayer2D& a, AdaptivePoolLayer2D& b) {
    a.Swap(&b);
  }
  inline void Swap(AdaptivePoolLayer2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdaptivePoolLayer2D* New() const final {
    return CreateMaybeMessage<AdaptivePoolLayer2D>(nullptr);
  }

  AdaptivePoolLayer2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdaptivePoolLayer2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdaptivePoolLayer2D& from);
  void MergeFrom(const AdaptivePoolLayer2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdaptivePoolLayer2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeepNet.AdaptivePoolLayer2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AdaptivePoolLayer2D_PoolType PoolType;
  static constexpr PoolType MAX =
    AdaptivePoolLayer2D_PoolType_MAX;
  static constexpr PoolType AVG =
    AdaptivePoolLayer2D_PoolType_AVG;
  static inline bool PoolType_IsValid(int value) {
    return AdaptivePoolLayer2D_PoolType_IsValid(value);
  }
  static constexpr PoolType PoolType_MIN =
    AdaptivePoolLayer2D_PoolType_PoolType_MIN;
  static constexpr PoolType PoolType_MAX =
    AdaptivePoolLayer2D_PoolType_PoolType_MAX;
  static constexpr int PoolType_ARRAYSIZE =
    AdaptivePoolLayer2D_PoolType_PoolType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PoolType_descriptor() {
    return AdaptivePoolLayer2D_PoolType_descriptor();
  }
  template<typename T>
  static inline const std::string& PoolType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PoolType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PoolType_Name.");
    return AdaptivePoolLayer2D_PoolType_Name(enum_t_value);
  }
  static inline bool PoolType_Parse(const std::string& name,
      PoolType* value) {
    return AdaptivePoolLayer2D_PoolType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kOutXFieldNumber = 2,
    kOutYFieldNumber = 3,
  };
  // required .DeepNet.AdaptivePoolLayer2D.PoolType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::DeepNet::AdaptivePoolLayer2D_PoolType type() const;
  void set_type(::DeepNet::AdaptivePoolLayer2D_PoolType value);
  private:
  ::DeepNet::AdaptivePoolLayer2D_PoolType _internal_type() const;
  void _internal_set_type(::DeepNet::AdaptivePoolLayer2D_PoolType value);
  public:

  // required int32 out_x = 2;
  bool has_out_x() const;
  private:
  bool _internal_has_out_x() const;
  public:
  void clear_out_x();
  ::PROTOBUF_NAMESPACE_ID::int32 out_x() const;
  void set_out_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_x() const;
  void _internal_set_out_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 out_y = 3;
  bool has_out_y() const;
  private:
  bool _internal_has_out_y() const;
  public:
  void clear_out_y();
  ::PROTOBUF_NAMESPACE_ID::int32 out_y() const;
  void set_out_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_y() const;
  void _internal_set_out_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DeepNet.AdaptivePoolLayer2D)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_y_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class LinearLayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeepNet.LinearLayer) */ {
 public:
  LinearLayer();
  virtual ~LinearLayer();

  LinearLayer(const LinearLayer& from);
  LinearLayer(LinearLayer&& from) noexcept
    : LinearLayer() {
    *this = ::std::move(from);
  }

  inline LinearLayer& operator=(const LinearLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearLayer& operator=(LinearLayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinearLayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinearLayer* internal_default_instance() {
    return reinterpret_cast<const LinearLayer*>(
               &_LinearLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LinearLayer& a, LinearLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearLayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearLayer* New() const final {
    return CreateMaybeMessage<LinearLayer>(nullptr);
  }

  LinearLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearLayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinearLayer& from);
  void MergeFrom(const LinearLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeepNet.LinearLayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 3,
    kBiasFieldNumber = 5,
    kInNodesFieldNumber = 1,
    kOutNodesFieldNumber = 2,
    kBiasPresentFieldNumber = 4,
  };
  // repeated float weight = 3;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  private:
  float _internal_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight() const;
  void _internal_add_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight();
  public:
  float weight(int index) const;
  void set_weight(int index, float value);
  void add_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight();

  // repeated float bias = 5;
  int bias_size() const;
  private:
  int _internal_bias_size() const;
  public:
  void clear_bias();
  private:
  float _internal_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bias() const;
  void _internal_add_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bias();
  public:
  float bias(int index) const;
  void set_bias(int index, float value);
  void add_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bias();

  // required int32 in_nodes = 1;
  bool has_in_nodes() const;
  private:
  bool _internal_has_in_nodes() const;
  public:
  void clear_in_nodes();
  ::PROTOBUF_NAMESPACE_ID::int32 in_nodes() const;
  void set_in_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in_nodes() const;
  void _internal_set_in_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 out_nodes = 2;
  bool has_out_nodes() const;
  private:
  bool _internal_has_out_nodes() const;
  public:
  void clear_out_nodes();
  ::PROTOBUF_NAMESPACE_ID::int32 out_nodes() const;
  void set_out_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_nodes() const;
  void _internal_set_out_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool bias_present = 4 [default = false];
  bool has_bias_present() const;
  private:
  bool _internal_has_bias_present() const;
  public:
  void clear_bias_present();
  bool bias_present() const;
  void set_bias_present(bool value);
  private:
  bool _internal_bias_present() const;
  void _internal_set_bias_present(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DeepNet.LinearLayer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bias_;
  ::PROTOBUF_NAMESPACE_ID::int32 in_nodes_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_nodes_;
  bool bias_present_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class DropOutLayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeepNet.DropOutLayer) */ {
 public:
  DropOutLayer();
  virtual ~DropOutLayer();

  DropOutLayer(const DropOutLayer& from);
  DropOutLayer(DropOutLayer&& from) noexcept
    : DropOutLayer() {
    *this = ::std::move(from);
  }

  inline DropOutLayer& operator=(const DropOutLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropOutLayer& operator=(DropOutLayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropOutLayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropOutLayer* internal_default_instance() {
    return reinterpret_cast<const DropOutLayer*>(
               &_DropOutLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DropOutLayer& a, DropOutLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(DropOutLayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropOutLayer* New() const final {
    return CreateMaybeMessage<DropOutLayer>(nullptr);
  }

  DropOutLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropOutLayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropOutLayer& from);
  void MergeFrom(const DropOutLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropOutLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeepNet.DropOutLayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 1,
  };
  // required float p = 1;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  float p() const;
  void set_p(float value);
  private:
  float _internal_p() const;
  void _internal_set_p(float value);
  public:

  // @@protoc_insertion_point(class_scope:DeepNet.DropOutLayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float p_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class Layer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeepNet.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layer& operator=(Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Layer& default_instance();

  enum LayerComponentCase {
    kLinear = 2,
    kConv = 3,
    kPool = 4,
    kApool = 5,
    kDrop = 6,
    kAct = 7,
    LAYERCOMPONENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(Layer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Layer* New() const final {
    return CreateMaybeMessage<Layer>(nullptr);
  }

  Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Layer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Layer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeepNet.Layer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Layer_LayerType LayerType;
  static constexpr LayerType LINEAR =
    Layer_LayerType_LINEAR;
  static constexpr LayerType CONV =
    Layer_LayerType_CONV;
  static constexpr LayerType POOL =
    Layer_LayerType_POOL;
  static constexpr LayerType ADAPTIVE_POOL =
    Layer_LayerType_ADAPTIVE_POOL;
  static constexpr LayerType DROPUT =
    Layer_LayerType_DROPUT;
  static constexpr LayerType ACTIVATION =
    Layer_LayerType_ACTIVATION;
  static inline bool LayerType_IsValid(int value) {
    return Layer_LayerType_IsValid(value);
  }
  static constexpr LayerType LayerType_MIN =
    Layer_LayerType_LayerType_MIN;
  static constexpr LayerType LayerType_MAX =
    Layer_LayerType_LayerType_MAX;
  static constexpr int LayerType_ARRAYSIZE =
    Layer_LayerType_LayerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LayerType_descriptor() {
    return Layer_LayerType_descriptor();
  }
  template<typename T>
  static inline const std::string& LayerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LayerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LayerType_Name.");
    return Layer_LayerType_Name(enum_t_value);
  }
  static inline bool LayerType_Parse(const std::string& name,
      LayerType* value) {
    return Layer_LayerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLinearFieldNumber = 2,
    kConvFieldNumber = 3,
    kPoolFieldNumber = 4,
    kApoolFieldNumber = 5,
    kDropFieldNumber = 6,
    kActFieldNumber = 7,
  };
  // required .DeepNet.Layer.LayerType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::DeepNet::Layer_LayerType type() const;
  void set_type(::DeepNet::Layer_LayerType value);
  private:
  ::DeepNet::Layer_LayerType _internal_type() const;
  void _internal_set_type(::DeepNet::Layer_LayerType value);
  public:

  // optional .DeepNet.LinearLayer linear = 2;
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;
  public:
  void clear_linear();
  const ::DeepNet::LinearLayer& linear() const;
  ::DeepNet::LinearLayer* release_linear();
  ::DeepNet::LinearLayer* mutable_linear();
  void set_allocated_linear(::DeepNet::LinearLayer* linear);
  private:
  const ::DeepNet::LinearLayer& _internal_linear() const;
  ::DeepNet::LinearLayer* _internal_mutable_linear();
  public:

  // optional .DeepNet.ConvLayer2D conv = 3;
  bool has_conv() const;
  private:
  bool _internal_has_conv() const;
  public:
  void clear_conv();
  const ::DeepNet::ConvLayer2D& conv() const;
  ::DeepNet::ConvLayer2D* release_conv();
  ::DeepNet::ConvLayer2D* mutable_conv();
  void set_allocated_conv(::DeepNet::ConvLayer2D* conv);
  private:
  const ::DeepNet::ConvLayer2D& _internal_conv() const;
  ::DeepNet::ConvLayer2D* _internal_mutable_conv();
  public:

  // optional .DeepNet.PoolLayer2D pool = 4;
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  const ::DeepNet::PoolLayer2D& pool() const;
  ::DeepNet::PoolLayer2D* release_pool();
  ::DeepNet::PoolLayer2D* mutable_pool();
  void set_allocated_pool(::DeepNet::PoolLayer2D* pool);
  private:
  const ::DeepNet::PoolLayer2D& _internal_pool() const;
  ::DeepNet::PoolLayer2D* _internal_mutable_pool();
  public:

  // optional .DeepNet.AdaptivePoolLayer2D apool = 5;
  bool has_apool() const;
  private:
  bool _internal_has_apool() const;
  public:
  void clear_apool();
  const ::DeepNet::AdaptivePoolLayer2D& apool() const;
  ::DeepNet::AdaptivePoolLayer2D* release_apool();
  ::DeepNet::AdaptivePoolLayer2D* mutable_apool();
  void set_allocated_apool(::DeepNet::AdaptivePoolLayer2D* apool);
  private:
  const ::DeepNet::AdaptivePoolLayer2D& _internal_apool() const;
  ::DeepNet::AdaptivePoolLayer2D* _internal_mutable_apool();
  public:

  // optional .DeepNet.DropOutLayer drop = 6;
  bool has_drop() const;
  private:
  bool _internal_has_drop() const;
  public:
  void clear_drop();
  const ::DeepNet::DropOutLayer& drop() const;
  ::DeepNet::DropOutLayer* release_drop();
  ::DeepNet::DropOutLayer* mutable_drop();
  void set_allocated_drop(::DeepNet::DropOutLayer* drop);
  private:
  const ::DeepNet::DropOutLayer& _internal_drop() const;
  ::DeepNet::DropOutLayer* _internal_mutable_drop();
  public:

  // optional .DeepNet.Activation act = 7;
  bool has_act() const;
  private:
  bool _internal_has_act() const;
  public:
  void clear_act();
  const ::DeepNet::Activation& act() const;
  ::DeepNet::Activation* release_act();
  ::DeepNet::Activation* mutable_act();
  void set_allocated_act(::DeepNet::Activation* act);
  private:
  const ::DeepNet::Activation& _internal_act() const;
  ::DeepNet::Activation* _internal_mutable_act();
  public:

  void clear_LayerComponent();
  LayerComponentCase LayerComponent_case() const;
  // @@protoc_insertion_point(class_scope:DeepNet.Layer)
 private:
  class _Internal;
  void set_has_linear();
  void set_has_conv();
  void set_has_pool();
  void set_has_apool();
  void set_has_drop();
  void set_has_act();

  inline bool has_LayerComponent() const;
  inline void clear_has_LayerComponent();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  union LayerComponentUnion {
    LayerComponentUnion() {}
    ::DeepNet::LinearLayer* linear_;
    ::DeepNet::ConvLayer2D* conv_;
    ::DeepNet::PoolLayer2D* pool_;
    ::DeepNet::AdaptivePoolLayer2D* apool_;
    ::DeepNet::DropOutLayer* drop_;
    ::DeepNet::Activation* act_;
  } LayerComponent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class Network :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeepNet.Network) */ {
 public:
  Network();
  virtual ~Network();

  Network(const Network& from);
  Network(Network&& from) noexcept
    : Network() {
    *this = ::std::move(from);
  }

  inline Network& operator=(const Network& from) {
    CopyFrom(from);
    return *this;
  }
  inline Network& operator=(Network&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Network& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Network* internal_default_instance() {
    return reinterpret_cast<const Network*>(
               &_Network_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Network& a, Network& b) {
    a.Swap(&b);
  }
  inline void Swap(Network* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Network* New() const final {
    return CreateMaybeMessage<Network>(nullptr);
  }

  Network* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Network>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Network& from);
  void MergeFrom(const Network& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Network* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeepNet.Network";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 2,
    kNumLayersFieldNumber = 1,
  };
  // repeated .DeepNet.Layer layers = 2;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::DeepNet::Layer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeepNet::Layer >*
      mutable_layers();
  private:
  const ::DeepNet::Layer& _internal_layers(int index) const;
  ::DeepNet::Layer* _internal_add_layers();
  public:
  const ::DeepNet::Layer& layers(int index) const;
  ::DeepNet::Layer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeepNet::Layer >&
      layers() const;

  // required int32 num_layers = 1;
  bool has_num_layers() const;
  private:
  bool _internal_has_num_layers() const;
  public:
  void clear_num_layers();
  ::PROTOBUF_NAMESPACE_ID::int32 num_layers() const;
  void set_num_layers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_layers() const;
  void _internal_set_num_layers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DeepNet.Network)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeepNet::Layer > layers_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_layers_;
  friend struct ::TableStruct_network_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConvLayer2D

// required int32 out_channels = 2;
inline bool ConvLayer2D::_internal_has_out_channels() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConvLayer2D::has_out_channels() const {
  return _internal_has_out_channels();
}
inline void ConvLayer2D::clear_out_channels() {
  out_channels_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::_internal_out_channels() const {
  return out_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::out_channels() const {
  // @@protoc_insertion_point(field_get:DeepNet.ConvLayer2D.out_channels)
  return _internal_out_channels();
}
inline void ConvLayer2D::_internal_set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  out_channels_ = value;
}
inline void ConvLayer2D::set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_channels(value);
  // @@protoc_insertion_point(field_set:DeepNet.ConvLayer2D.out_channels)
}

// required int32 in_channels = 3;
inline bool ConvLayer2D::_internal_has_in_channels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConvLayer2D::has_in_channels() const {
  return _internal_has_in_channels();
}
inline void ConvLayer2D::clear_in_channels() {
  in_channels_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::_internal_in_channels() const {
  return in_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::in_channels() const {
  // @@protoc_insertion_point(field_get:DeepNet.ConvLayer2D.in_channels)
  return _internal_in_channels();
}
inline void ConvLayer2D::_internal_set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  in_channels_ = value;
}
inline void ConvLayer2D::set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_in_channels(value);
  // @@protoc_insertion_point(field_set:DeepNet.ConvLayer2D.in_channels)
}

// required int32 height = 4;
inline bool ConvLayer2D::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConvLayer2D::has_height() const {
  return _internal_has_height();
}
inline void ConvLayer2D::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::height() const {
  // @@protoc_insertion_point(field_get:DeepNet.ConvLayer2D.height)
  return _internal_height();
}
inline void ConvLayer2D::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void ConvLayer2D::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:DeepNet.ConvLayer2D.height)
}

// required int32 width = 5;
inline bool ConvLayer2D::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConvLayer2D::has_width() const {
  return _internal_has_width();
}
inline void ConvLayer2D::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::width() const {
  // @@protoc_insertion_point(field_get:DeepNet.ConvLayer2D.width)
  return _internal_width();
}
inline void ConvLayer2D::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void ConvLayer2D::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:DeepNet.ConvLayer2D.width)
}

// required int32 stride = 6;
inline bool ConvLayer2D::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConvLayer2D::has_stride() const {
  return _internal_has_stride();
}
inline void ConvLayer2D::clear_stride() {
  stride_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::stride() const {
  // @@protoc_insertion_point(field_get:DeepNet.ConvLayer2D.stride)
  return _internal_stride();
}
inline void ConvLayer2D::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  stride_ = value;
}
inline void ConvLayer2D::set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:DeepNet.ConvLayer2D.stride)
}

// required int32 padding = 7;
inline bool ConvLayer2D::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConvLayer2D::has_padding() const {
  return _internal_has_padding();
}
inline void ConvLayer2D::clear_padding() {
  padding_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::_internal_padding() const {
  return padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::padding() const {
  // @@protoc_insertion_point(field_get:DeepNet.ConvLayer2D.padding)
  return _internal_padding();
}
inline void ConvLayer2D::_internal_set_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  padding_ = value;
}
inline void ConvLayer2D::set_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:DeepNet.ConvLayer2D.padding)
}

// optional int32 dilation = 8;
inline bool ConvLayer2D::_internal_has_dilation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ConvLayer2D::has_dilation() const {
  return _internal_has_dilation();
}
inline void ConvLayer2D::clear_dilation() {
  dilation_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::_internal_dilation() const {
  return dilation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvLayer2D::dilation() const {
  // @@protoc_insertion_point(field_get:DeepNet.ConvLayer2D.dilation)
  return _internal_dilation();
}
inline void ConvLayer2D::_internal_set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  dilation_ = value;
}
inline void ConvLayer2D::set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dilation(value);
  // @@protoc_insertion_point(field_set:DeepNet.ConvLayer2D.dilation)
}

// repeated float weight = 9;
inline int ConvLayer2D::_internal_weight_size() const {
  return weight_.size();
}
inline int ConvLayer2D::weight_size() const {
  return _internal_weight_size();
}
inline void ConvLayer2D::clear_weight() {
  weight_.Clear();
}
inline float ConvLayer2D::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline float ConvLayer2D::weight(int index) const {
  // @@protoc_insertion_point(field_get:DeepNet.ConvLayer2D.weight)
  return _internal_weight(index);
}
inline void ConvLayer2D::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:DeepNet.ConvLayer2D.weight)
}
inline void ConvLayer2D::_internal_add_weight(float value) {
  weight_.Add(value);
}
inline void ConvLayer2D::add_weight(float value) {
  _internal_add_weight(value);
  // @@protoc_insertion_point(field_add:DeepNet.ConvLayer2D.weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ConvLayer2D::_internal_weight() const {
  return weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ConvLayer2D::weight() const {
  // @@protoc_insertion_point(field_list:DeepNet.ConvLayer2D.weight)
  return _internal_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ConvLayer2D::_internal_mutable_weight() {
  return &weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ConvLayer2D::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:DeepNet.ConvLayer2D.weight)
  return _internal_mutable_weight();
}

// required bool bias_present = 10 [default = false];
inline bool ConvLayer2D::_internal_has_bias_present() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ConvLayer2D::has_bias_present() const {
  return _internal_has_bias_present();
}
inline void ConvLayer2D::clear_bias_present() {
  bias_present_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ConvLayer2D::_internal_bias_present() const {
  return bias_present_;
}
inline bool ConvLayer2D::bias_present() const {
  // @@protoc_insertion_point(field_get:DeepNet.ConvLayer2D.bias_present)
  return _internal_bias_present();
}
inline void ConvLayer2D::_internal_set_bias_present(bool value) {
  _has_bits_[0] |= 0x00000080u;
  bias_present_ = value;
}
inline void ConvLayer2D::set_bias_present(bool value) {
  _internal_set_bias_present(value);
  // @@protoc_insertion_point(field_set:DeepNet.ConvLayer2D.bias_present)
}

// repeated float bias = 11;
inline int ConvLayer2D::_internal_bias_size() const {
  return bias_.size();
}
inline int ConvLayer2D::bias_size() const {
  return _internal_bias_size();
}
inline void ConvLayer2D::clear_bias() {
  bias_.Clear();
}
inline float ConvLayer2D::_internal_bias(int index) const {
  return bias_.Get(index);
}
inline float ConvLayer2D::bias(int index) const {
  // @@protoc_insertion_point(field_get:DeepNet.ConvLayer2D.bias)
  return _internal_bias(index);
}
inline void ConvLayer2D::set_bias(int index, float value) {
  bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:DeepNet.ConvLayer2D.bias)
}
inline void ConvLayer2D::_internal_add_bias(float value) {
  bias_.Add(value);
}
inline void ConvLayer2D::add_bias(float value) {
  _internal_add_bias(value);
  // @@protoc_insertion_point(field_add:DeepNet.ConvLayer2D.bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ConvLayer2D::_internal_bias() const {
  return bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ConvLayer2D::bias() const {
  // @@protoc_insertion_point(field_list:DeepNet.ConvLayer2D.bias)
  return _internal_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ConvLayer2D::_internal_mutable_bias() {
  return &bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ConvLayer2D::mutable_bias() {
  // @@protoc_insertion_point(field_mutable_list:DeepNet.ConvLayer2D.bias)
  return _internal_mutable_bias();
}

// -------------------------------------------------------------------

// Activation

// required .DeepNet.Activation.ActivationType type = 1;
inline bool Activation::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Activation::has_type() const {
  return _internal_has_type();
}
inline void Activation::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::DeepNet::Activation_ActivationType Activation::_internal_type() const {
  return static_cast< ::DeepNet::Activation_ActivationType >(type_);
}
inline ::DeepNet::Activation_ActivationType Activation::type() const {
  // @@protoc_insertion_point(field_get:DeepNet.Activation.type)
  return _internal_type();
}
inline void Activation::_internal_set_type(::DeepNet::Activation_ActivationType value) {
  assert(::DeepNet::Activation_ActivationType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void Activation::set_type(::DeepNet::Activation_ActivationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DeepNet.Activation.type)
}

// -------------------------------------------------------------------

// PoolLayer2D

// required .DeepNet.PoolLayer2D.PoolType type = 1;
inline bool PoolLayer2D::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PoolLayer2D::has_type() const {
  return _internal_has_type();
}
inline void PoolLayer2D::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::DeepNet::PoolLayer2D_PoolType PoolLayer2D::_internal_type() const {
  return static_cast< ::DeepNet::PoolLayer2D_PoolType >(type_);
}
inline ::DeepNet::PoolLayer2D_PoolType PoolLayer2D::type() const {
  // @@protoc_insertion_point(field_get:DeepNet.PoolLayer2D.type)
  return _internal_type();
}
inline void PoolLayer2D::_internal_set_type(::DeepNet::PoolLayer2D_PoolType value) {
  assert(::DeepNet::PoolLayer2D_PoolType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void PoolLayer2D::set_type(::DeepNet::PoolLayer2D_PoolType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DeepNet.PoolLayer2D.type)
}

// required int32 kernel_size = 2;
inline bool PoolLayer2D::_internal_has_kernel_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PoolLayer2D::has_kernel_size() const {
  return _internal_has_kernel_size();
}
inline void PoolLayer2D::clear_kernel_size() {
  kernel_size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolLayer2D::_internal_kernel_size() const {
  return kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolLayer2D::kernel_size() const {
  // @@protoc_insertion_point(field_get:DeepNet.PoolLayer2D.kernel_size)
  return _internal_kernel_size();
}
inline void PoolLayer2D::_internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  kernel_size_ = value;
}
inline void PoolLayer2D::set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:DeepNet.PoolLayer2D.kernel_size)
}

// required int32 stride = 3;
inline bool PoolLayer2D::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PoolLayer2D::has_stride() const {
  return _internal_has_stride();
}
inline void PoolLayer2D::clear_stride() {
  stride_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolLayer2D::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolLayer2D::stride() const {
  // @@protoc_insertion_point(field_get:DeepNet.PoolLayer2D.stride)
  return _internal_stride();
}
inline void PoolLayer2D::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  stride_ = value;
}
inline void PoolLayer2D::set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:DeepNet.PoolLayer2D.stride)
}

// required int32 padding = 4;
inline bool PoolLayer2D::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PoolLayer2D::has_padding() const {
  return _internal_has_padding();
}
inline void PoolLayer2D::clear_padding() {
  padding_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolLayer2D::_internal_padding() const {
  return padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolLayer2D::padding() const {
  // @@protoc_insertion_point(field_get:DeepNet.PoolLayer2D.padding)
  return _internal_padding();
}
inline void PoolLayer2D::_internal_set_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  padding_ = value;
}
inline void PoolLayer2D::set_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:DeepNet.PoolLayer2D.padding)
}

// required int32 dilation = 5;
inline bool PoolLayer2D::_internal_has_dilation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PoolLayer2D::has_dilation() const {
  return _internal_has_dilation();
}
inline void PoolLayer2D::clear_dilation() {
  dilation_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolLayer2D::_internal_dilation() const {
  return dilation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoolLayer2D::dilation() const {
  // @@protoc_insertion_point(field_get:DeepNet.PoolLayer2D.dilation)
  return _internal_dilation();
}
inline void PoolLayer2D::_internal_set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  dilation_ = value;
}
inline void PoolLayer2D::set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dilation(value);
  // @@protoc_insertion_point(field_set:DeepNet.PoolLayer2D.dilation)
}

// -------------------------------------------------------------------

// AdaptivePoolLayer2D

// required .DeepNet.AdaptivePoolLayer2D.PoolType type = 1;
inline bool AdaptivePoolLayer2D::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdaptivePoolLayer2D::has_type() const {
  return _internal_has_type();
}
inline void AdaptivePoolLayer2D::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::DeepNet::AdaptivePoolLayer2D_PoolType AdaptivePoolLayer2D::_internal_type() const {
  return static_cast< ::DeepNet::AdaptivePoolLayer2D_PoolType >(type_);
}
inline ::DeepNet::AdaptivePoolLayer2D_PoolType AdaptivePoolLayer2D::type() const {
  // @@protoc_insertion_point(field_get:DeepNet.AdaptivePoolLayer2D.type)
  return _internal_type();
}
inline void AdaptivePoolLayer2D::_internal_set_type(::DeepNet::AdaptivePoolLayer2D_PoolType value) {
  assert(::DeepNet::AdaptivePoolLayer2D_PoolType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void AdaptivePoolLayer2D::set_type(::DeepNet::AdaptivePoolLayer2D_PoolType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DeepNet.AdaptivePoolLayer2D.type)
}

// required int32 out_x = 2;
inline bool AdaptivePoolLayer2D::_internal_has_out_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdaptivePoolLayer2D::has_out_x() const {
  return _internal_has_out_x();
}
inline void AdaptivePoolLayer2D::clear_out_x() {
  out_x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AdaptivePoolLayer2D::_internal_out_x() const {
  return out_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AdaptivePoolLayer2D::out_x() const {
  // @@protoc_insertion_point(field_get:DeepNet.AdaptivePoolLayer2D.out_x)
  return _internal_out_x();
}
inline void AdaptivePoolLayer2D::_internal_set_out_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  out_x_ = value;
}
inline void AdaptivePoolLayer2D::set_out_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_x(value);
  // @@protoc_insertion_point(field_set:DeepNet.AdaptivePoolLayer2D.out_x)
}

// required int32 out_y = 3;
inline bool AdaptivePoolLayer2D::_internal_has_out_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AdaptivePoolLayer2D::has_out_y() const {
  return _internal_has_out_y();
}
inline void AdaptivePoolLayer2D::clear_out_y() {
  out_y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AdaptivePoolLayer2D::_internal_out_y() const {
  return out_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AdaptivePoolLayer2D::out_y() const {
  // @@protoc_insertion_point(field_get:DeepNet.AdaptivePoolLayer2D.out_y)
  return _internal_out_y();
}
inline void AdaptivePoolLayer2D::_internal_set_out_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  out_y_ = value;
}
inline void AdaptivePoolLayer2D::set_out_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_y(value);
  // @@protoc_insertion_point(field_set:DeepNet.AdaptivePoolLayer2D.out_y)
}

// -------------------------------------------------------------------

// LinearLayer

// required int32 in_nodes = 1;
inline bool LinearLayer::_internal_has_in_nodes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinearLayer::has_in_nodes() const {
  return _internal_has_in_nodes();
}
inline void LinearLayer::clear_in_nodes() {
  in_nodes_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearLayer::_internal_in_nodes() const {
  return in_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearLayer::in_nodes() const {
  // @@protoc_insertion_point(field_get:DeepNet.LinearLayer.in_nodes)
  return _internal_in_nodes();
}
inline void LinearLayer::_internal_set_in_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  in_nodes_ = value;
}
inline void LinearLayer::set_in_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_in_nodes(value);
  // @@protoc_insertion_point(field_set:DeepNet.LinearLayer.in_nodes)
}

// required int32 out_nodes = 2;
inline bool LinearLayer::_internal_has_out_nodes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinearLayer::has_out_nodes() const {
  return _internal_has_out_nodes();
}
inline void LinearLayer::clear_out_nodes() {
  out_nodes_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearLayer::_internal_out_nodes() const {
  return out_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearLayer::out_nodes() const {
  // @@protoc_insertion_point(field_get:DeepNet.LinearLayer.out_nodes)
  return _internal_out_nodes();
}
inline void LinearLayer::_internal_set_out_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  out_nodes_ = value;
}
inline void LinearLayer::set_out_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_nodes(value);
  // @@protoc_insertion_point(field_set:DeepNet.LinearLayer.out_nodes)
}

// repeated float weight = 3;
inline int LinearLayer::_internal_weight_size() const {
  return weight_.size();
}
inline int LinearLayer::weight_size() const {
  return _internal_weight_size();
}
inline void LinearLayer::clear_weight() {
  weight_.Clear();
}
inline float LinearLayer::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline float LinearLayer::weight(int index) const {
  // @@protoc_insertion_point(field_get:DeepNet.LinearLayer.weight)
  return _internal_weight(index);
}
inline void LinearLayer::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:DeepNet.LinearLayer.weight)
}
inline void LinearLayer::_internal_add_weight(float value) {
  weight_.Add(value);
}
inline void LinearLayer::add_weight(float value) {
  _internal_add_weight(value);
  // @@protoc_insertion_point(field_add:DeepNet.LinearLayer.weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LinearLayer::_internal_weight() const {
  return weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LinearLayer::weight() const {
  // @@protoc_insertion_point(field_list:DeepNet.LinearLayer.weight)
  return _internal_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LinearLayer::_internal_mutable_weight() {
  return &weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LinearLayer::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:DeepNet.LinearLayer.weight)
  return _internal_mutable_weight();
}

// required bool bias_present = 4 [default = false];
inline bool LinearLayer::_internal_has_bias_present() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LinearLayer::has_bias_present() const {
  return _internal_has_bias_present();
}
inline void LinearLayer::clear_bias_present() {
  bias_present_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LinearLayer::_internal_bias_present() const {
  return bias_present_;
}
inline bool LinearLayer::bias_present() const {
  // @@protoc_insertion_point(field_get:DeepNet.LinearLayer.bias_present)
  return _internal_bias_present();
}
inline void LinearLayer::_internal_set_bias_present(bool value) {
  _has_bits_[0] |= 0x00000004u;
  bias_present_ = value;
}
inline void LinearLayer::set_bias_present(bool value) {
  _internal_set_bias_present(value);
  // @@protoc_insertion_point(field_set:DeepNet.LinearLayer.bias_present)
}

// repeated float bias = 5;
inline int LinearLayer::_internal_bias_size() const {
  return bias_.size();
}
inline int LinearLayer::bias_size() const {
  return _internal_bias_size();
}
inline void LinearLayer::clear_bias() {
  bias_.Clear();
}
inline float LinearLayer::_internal_bias(int index) const {
  return bias_.Get(index);
}
inline float LinearLayer::bias(int index) const {
  // @@protoc_insertion_point(field_get:DeepNet.LinearLayer.bias)
  return _internal_bias(index);
}
inline void LinearLayer::set_bias(int index, float value) {
  bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:DeepNet.LinearLayer.bias)
}
inline void LinearLayer::_internal_add_bias(float value) {
  bias_.Add(value);
}
inline void LinearLayer::add_bias(float value) {
  _internal_add_bias(value);
  // @@protoc_insertion_point(field_add:DeepNet.LinearLayer.bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LinearLayer::_internal_bias() const {
  return bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LinearLayer::bias() const {
  // @@protoc_insertion_point(field_list:DeepNet.LinearLayer.bias)
  return _internal_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LinearLayer::_internal_mutable_bias() {
  return &bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LinearLayer::mutable_bias() {
  // @@protoc_insertion_point(field_mutable_list:DeepNet.LinearLayer.bias)
  return _internal_mutable_bias();
}

// -------------------------------------------------------------------

// DropOutLayer

// required float p = 1;
inline bool DropOutLayer::_internal_has_p() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DropOutLayer::has_p() const {
  return _internal_has_p();
}
inline void DropOutLayer::clear_p() {
  p_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float DropOutLayer::_internal_p() const {
  return p_;
}
inline float DropOutLayer::p() const {
  // @@protoc_insertion_point(field_get:DeepNet.DropOutLayer.p)
  return _internal_p();
}
inline void DropOutLayer::_internal_set_p(float value) {
  _has_bits_[0] |= 0x00000001u;
  p_ = value;
}
inline void DropOutLayer::set_p(float value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:DeepNet.DropOutLayer.p)
}

// -------------------------------------------------------------------

// Layer

// required .DeepNet.Layer.LayerType type = 1;
inline bool Layer::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Layer::has_type() const {
  return _internal_has_type();
}
inline void Layer::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::DeepNet::Layer_LayerType Layer::_internal_type() const {
  return static_cast< ::DeepNet::Layer_LayerType >(type_);
}
inline ::DeepNet::Layer_LayerType Layer::type() const {
  // @@protoc_insertion_point(field_get:DeepNet.Layer.type)
  return _internal_type();
}
inline void Layer::_internal_set_type(::DeepNet::Layer_LayerType value) {
  assert(::DeepNet::Layer_LayerType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void Layer::set_type(::DeepNet::Layer_LayerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DeepNet.Layer.type)
}

// optional .DeepNet.LinearLayer linear = 2;
inline bool Layer::_internal_has_linear() const {
  return LayerComponent_case() == kLinear;
}
inline bool Layer::has_linear() const {
  return _internal_has_linear();
}
inline void Layer::set_has_linear() {
  _oneof_case_[0] = kLinear;
}
inline void Layer::clear_linear() {
  if (_internal_has_linear()) {
    delete LayerComponent_.linear_;
    clear_has_LayerComponent();
  }
}
inline ::DeepNet::LinearLayer* Layer::release_linear() {
  // @@protoc_insertion_point(field_release:DeepNet.Layer.linear)
  if (_internal_has_linear()) {
    clear_has_LayerComponent();
      ::DeepNet::LinearLayer* temp = LayerComponent_.linear_;
    LayerComponent_.linear_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DeepNet::LinearLayer& Layer::_internal_linear() const {
  return _internal_has_linear()
      ? *LayerComponent_.linear_
      : *reinterpret_cast< ::DeepNet::LinearLayer*>(&::DeepNet::_LinearLayer_default_instance_);
}
inline const ::DeepNet::LinearLayer& Layer::linear() const {
  // @@protoc_insertion_point(field_get:DeepNet.Layer.linear)
  return _internal_linear();
}
inline ::DeepNet::LinearLayer* Layer::_internal_mutable_linear() {
  if (!_internal_has_linear()) {
    clear_LayerComponent();
    set_has_linear();
    LayerComponent_.linear_ = CreateMaybeMessage< ::DeepNet::LinearLayer >(
        GetArenaNoVirtual());
  }
  return LayerComponent_.linear_;
}
inline ::DeepNet::LinearLayer* Layer::mutable_linear() {
  // @@protoc_insertion_point(field_mutable:DeepNet.Layer.linear)
  return _internal_mutable_linear();
}

// optional .DeepNet.ConvLayer2D conv = 3;
inline bool Layer::_internal_has_conv() const {
  return LayerComponent_case() == kConv;
}
inline bool Layer::has_conv() const {
  return _internal_has_conv();
}
inline void Layer::set_has_conv() {
  _oneof_case_[0] = kConv;
}
inline void Layer::clear_conv() {
  if (_internal_has_conv()) {
    delete LayerComponent_.conv_;
    clear_has_LayerComponent();
  }
}
inline ::DeepNet::ConvLayer2D* Layer::release_conv() {
  // @@protoc_insertion_point(field_release:DeepNet.Layer.conv)
  if (_internal_has_conv()) {
    clear_has_LayerComponent();
      ::DeepNet::ConvLayer2D* temp = LayerComponent_.conv_;
    LayerComponent_.conv_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DeepNet::ConvLayer2D& Layer::_internal_conv() const {
  return _internal_has_conv()
      ? *LayerComponent_.conv_
      : *reinterpret_cast< ::DeepNet::ConvLayer2D*>(&::DeepNet::_ConvLayer2D_default_instance_);
}
inline const ::DeepNet::ConvLayer2D& Layer::conv() const {
  // @@protoc_insertion_point(field_get:DeepNet.Layer.conv)
  return _internal_conv();
}
inline ::DeepNet::ConvLayer2D* Layer::_internal_mutable_conv() {
  if (!_internal_has_conv()) {
    clear_LayerComponent();
    set_has_conv();
    LayerComponent_.conv_ = CreateMaybeMessage< ::DeepNet::ConvLayer2D >(
        GetArenaNoVirtual());
  }
  return LayerComponent_.conv_;
}
inline ::DeepNet::ConvLayer2D* Layer::mutable_conv() {
  // @@protoc_insertion_point(field_mutable:DeepNet.Layer.conv)
  return _internal_mutable_conv();
}

// optional .DeepNet.PoolLayer2D pool = 4;
inline bool Layer::_internal_has_pool() const {
  return LayerComponent_case() == kPool;
}
inline bool Layer::has_pool() const {
  return _internal_has_pool();
}
inline void Layer::set_has_pool() {
  _oneof_case_[0] = kPool;
}
inline void Layer::clear_pool() {
  if (_internal_has_pool()) {
    delete LayerComponent_.pool_;
    clear_has_LayerComponent();
  }
}
inline ::DeepNet::PoolLayer2D* Layer::release_pool() {
  // @@protoc_insertion_point(field_release:DeepNet.Layer.pool)
  if (_internal_has_pool()) {
    clear_has_LayerComponent();
      ::DeepNet::PoolLayer2D* temp = LayerComponent_.pool_;
    LayerComponent_.pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DeepNet::PoolLayer2D& Layer::_internal_pool() const {
  return _internal_has_pool()
      ? *LayerComponent_.pool_
      : *reinterpret_cast< ::DeepNet::PoolLayer2D*>(&::DeepNet::_PoolLayer2D_default_instance_);
}
inline const ::DeepNet::PoolLayer2D& Layer::pool() const {
  // @@protoc_insertion_point(field_get:DeepNet.Layer.pool)
  return _internal_pool();
}
inline ::DeepNet::PoolLayer2D* Layer::_internal_mutable_pool() {
  if (!_internal_has_pool()) {
    clear_LayerComponent();
    set_has_pool();
    LayerComponent_.pool_ = CreateMaybeMessage< ::DeepNet::PoolLayer2D >(
        GetArenaNoVirtual());
  }
  return LayerComponent_.pool_;
}
inline ::DeepNet::PoolLayer2D* Layer::mutable_pool() {
  // @@protoc_insertion_point(field_mutable:DeepNet.Layer.pool)
  return _internal_mutable_pool();
}

// optional .DeepNet.AdaptivePoolLayer2D apool = 5;
inline bool Layer::_internal_has_apool() const {
  return LayerComponent_case() == kApool;
}
inline bool Layer::has_apool() const {
  return _internal_has_apool();
}
inline void Layer::set_has_apool() {
  _oneof_case_[0] = kApool;
}
inline void Layer::clear_apool() {
  if (_internal_has_apool()) {
    delete LayerComponent_.apool_;
    clear_has_LayerComponent();
  }
}
inline ::DeepNet::AdaptivePoolLayer2D* Layer::release_apool() {
  // @@protoc_insertion_point(field_release:DeepNet.Layer.apool)
  if (_internal_has_apool()) {
    clear_has_LayerComponent();
      ::DeepNet::AdaptivePoolLayer2D* temp = LayerComponent_.apool_;
    LayerComponent_.apool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DeepNet::AdaptivePoolLayer2D& Layer::_internal_apool() const {
  return _internal_has_apool()
      ? *LayerComponent_.apool_
      : *reinterpret_cast< ::DeepNet::AdaptivePoolLayer2D*>(&::DeepNet::_AdaptivePoolLayer2D_default_instance_);
}
inline const ::DeepNet::AdaptivePoolLayer2D& Layer::apool() const {
  // @@protoc_insertion_point(field_get:DeepNet.Layer.apool)
  return _internal_apool();
}
inline ::DeepNet::AdaptivePoolLayer2D* Layer::_internal_mutable_apool() {
  if (!_internal_has_apool()) {
    clear_LayerComponent();
    set_has_apool();
    LayerComponent_.apool_ = CreateMaybeMessage< ::DeepNet::AdaptivePoolLayer2D >(
        GetArenaNoVirtual());
  }
  return LayerComponent_.apool_;
}
inline ::DeepNet::AdaptivePoolLayer2D* Layer::mutable_apool() {
  // @@protoc_insertion_point(field_mutable:DeepNet.Layer.apool)
  return _internal_mutable_apool();
}

// optional .DeepNet.DropOutLayer drop = 6;
inline bool Layer::_internal_has_drop() const {
  return LayerComponent_case() == kDrop;
}
inline bool Layer::has_drop() const {
  return _internal_has_drop();
}
inline void Layer::set_has_drop() {
  _oneof_case_[0] = kDrop;
}
inline void Layer::clear_drop() {
  if (_internal_has_drop()) {
    delete LayerComponent_.drop_;
    clear_has_LayerComponent();
  }
}
inline ::DeepNet::DropOutLayer* Layer::release_drop() {
  // @@protoc_insertion_point(field_release:DeepNet.Layer.drop)
  if (_internal_has_drop()) {
    clear_has_LayerComponent();
      ::DeepNet::DropOutLayer* temp = LayerComponent_.drop_;
    LayerComponent_.drop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DeepNet::DropOutLayer& Layer::_internal_drop() const {
  return _internal_has_drop()
      ? *LayerComponent_.drop_
      : *reinterpret_cast< ::DeepNet::DropOutLayer*>(&::DeepNet::_DropOutLayer_default_instance_);
}
inline const ::DeepNet::DropOutLayer& Layer::drop() const {
  // @@protoc_insertion_point(field_get:DeepNet.Layer.drop)
  return _internal_drop();
}
inline ::DeepNet::DropOutLayer* Layer::_internal_mutable_drop() {
  if (!_internal_has_drop()) {
    clear_LayerComponent();
    set_has_drop();
    LayerComponent_.drop_ = CreateMaybeMessage< ::DeepNet::DropOutLayer >(
        GetArenaNoVirtual());
  }
  return LayerComponent_.drop_;
}
inline ::DeepNet::DropOutLayer* Layer::mutable_drop() {
  // @@protoc_insertion_point(field_mutable:DeepNet.Layer.drop)
  return _internal_mutable_drop();
}

// optional .DeepNet.Activation act = 7;
inline bool Layer::_internal_has_act() const {
  return LayerComponent_case() == kAct;
}
inline bool Layer::has_act() const {
  return _internal_has_act();
}
inline void Layer::set_has_act() {
  _oneof_case_[0] = kAct;
}
inline void Layer::clear_act() {
  if (_internal_has_act()) {
    delete LayerComponent_.act_;
    clear_has_LayerComponent();
  }
}
inline ::DeepNet::Activation* Layer::release_act() {
  // @@protoc_insertion_point(field_release:DeepNet.Layer.act)
  if (_internal_has_act()) {
    clear_has_LayerComponent();
      ::DeepNet::Activation* temp = LayerComponent_.act_;
    LayerComponent_.act_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DeepNet::Activation& Layer::_internal_act() const {
  return _internal_has_act()
      ? *LayerComponent_.act_
      : *reinterpret_cast< ::DeepNet::Activation*>(&::DeepNet::_Activation_default_instance_);
}
inline const ::DeepNet::Activation& Layer::act() const {
  // @@protoc_insertion_point(field_get:DeepNet.Layer.act)
  return _internal_act();
}
inline ::DeepNet::Activation* Layer::_internal_mutable_act() {
  if (!_internal_has_act()) {
    clear_LayerComponent();
    set_has_act();
    LayerComponent_.act_ = CreateMaybeMessage< ::DeepNet::Activation >(
        GetArenaNoVirtual());
  }
  return LayerComponent_.act_;
}
inline ::DeepNet::Activation* Layer::mutable_act() {
  // @@protoc_insertion_point(field_mutable:DeepNet.Layer.act)
  return _internal_mutable_act();
}

inline bool Layer::has_LayerComponent() const {
  return LayerComponent_case() != LAYERCOMPONENT_NOT_SET;
}
inline void Layer::clear_has_LayerComponent() {
  _oneof_case_[0] = LAYERCOMPONENT_NOT_SET;
}
inline Layer::LayerComponentCase Layer::LayerComponent_case() const {
  return Layer::LayerComponentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Network

// required int32 num_layers = 1;
inline bool Network::_internal_has_num_layers() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Network::has_num_layers() const {
  return _internal_has_num_layers();
}
inline void Network::clear_num_layers() {
  num_layers_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Network::_internal_num_layers() const {
  return num_layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Network::num_layers() const {
  // @@protoc_insertion_point(field_get:DeepNet.Network.num_layers)
  return _internal_num_layers();
}
inline void Network::_internal_set_num_layers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_layers_ = value;
}
inline void Network::set_num_layers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_layers(value);
  // @@protoc_insertion_point(field_set:DeepNet.Network.num_layers)
}

// repeated .DeepNet.Layer layers = 2;
inline int Network::_internal_layers_size() const {
  return layers_.size();
}
inline int Network::layers_size() const {
  return _internal_layers_size();
}
inline void Network::clear_layers() {
  layers_.Clear();
}
inline ::DeepNet::Layer* Network::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:DeepNet.Network.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeepNet::Layer >*
Network::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:DeepNet.Network.layers)
  return &layers_;
}
inline const ::DeepNet::Layer& Network::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::DeepNet::Layer& Network::layers(int index) const {
  // @@protoc_insertion_point(field_get:DeepNet.Network.layers)
  return _internal_layers(index);
}
inline ::DeepNet::Layer* Network::_internal_add_layers() {
  return layers_.Add();
}
inline ::DeepNet::Layer* Network::add_layers() {
  // @@protoc_insertion_point(field_add:DeepNet.Network.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeepNet::Layer >&
Network::layers() const {
  // @@protoc_insertion_point(field_list:DeepNet.Network.layers)
  return layers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DeepNet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DeepNet::Activation_ActivationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeepNet::Activation_ActivationType>() {
  return ::DeepNet::Activation_ActivationType_descriptor();
}
template <> struct is_proto_enum< ::DeepNet::PoolLayer2D_PoolType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeepNet::PoolLayer2D_PoolType>() {
  return ::DeepNet::PoolLayer2D_PoolType_descriptor();
}
template <> struct is_proto_enum< ::DeepNet::AdaptivePoolLayer2D_PoolType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeepNet::AdaptivePoolLayer2D_PoolType>() {
  return ::DeepNet::AdaptivePoolLayer2D_PoolType_descriptor();
}
template <> struct is_proto_enum< ::DeepNet::Layer_LayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeepNet::Layer_LayerType>() {
  return ::DeepNet::Layer_LayerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_2eproto
