// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#include "network.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_network_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Activation_network_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_network_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdaptivePoolLayer2D_network_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_network_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvLayer2D_network_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_network_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DropOutLayer_network_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_network_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Layer_network_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_network_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearLayer_network_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_network_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolLayer2D_network_2eproto;
namespace DeepNet {
class ConvLayer2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvLayer2D> _instance;
} _ConvLayer2D_default_instance_;
class ActivationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Activation> _instance;
} _Activation_default_instance_;
class PoolLayer2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoolLayer2D> _instance;
} _PoolLayer2D_default_instance_;
class AdaptivePoolLayer2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdaptivePoolLayer2D> _instance;
} _AdaptivePoolLayer2D_default_instance_;
class LinearLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinearLayer> _instance;
} _LinearLayer_default_instance_;
class DropOutLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropOutLayer> _instance;
} _DropOutLayer_default_instance_;
class LayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Layer> _instance;
  const ::DeepNet::LinearLayer* linear_;
  const ::DeepNet::ConvLayer2D* conv_;
  const ::DeepNet::PoolLayer2D* pool_;
  const ::DeepNet::AdaptivePoolLayer2D* apool_;
  const ::DeepNet::DropOutLayer* drop_;
  const ::DeepNet::Activation* act_;
} _Layer_default_instance_;
class NetworkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Network> _instance;
} _Network_default_instance_;
}  // namespace DeepNet
static void InitDefaultsscc_info_Activation_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DeepNet::_Activation_default_instance_;
    new (ptr) ::DeepNet::Activation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeepNet::Activation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Activation_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Activation_network_2eproto}, {}};

static void InitDefaultsscc_info_AdaptivePoolLayer2D_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DeepNet::_AdaptivePoolLayer2D_default_instance_;
    new (ptr) ::DeepNet::AdaptivePoolLayer2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeepNet::AdaptivePoolLayer2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdaptivePoolLayer2D_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdaptivePoolLayer2D_network_2eproto}, {}};

static void InitDefaultsscc_info_ConvLayer2D_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DeepNet::_ConvLayer2D_default_instance_;
    new (ptr) ::DeepNet::ConvLayer2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeepNet::ConvLayer2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvLayer2D_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConvLayer2D_network_2eproto}, {}};

static void InitDefaultsscc_info_DropOutLayer_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DeepNet::_DropOutLayer_default_instance_;
    new (ptr) ::DeepNet::DropOutLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeepNet::DropOutLayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DropOutLayer_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DropOutLayer_network_2eproto}, {}};

static void InitDefaultsscc_info_Layer_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DeepNet::_Layer_default_instance_;
    new (ptr) ::DeepNet::Layer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeepNet::Layer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Layer_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Layer_network_2eproto}, {
      &scc_info_LinearLayer_network_2eproto.base,
      &scc_info_ConvLayer2D_network_2eproto.base,
      &scc_info_PoolLayer2D_network_2eproto.base,
      &scc_info_AdaptivePoolLayer2D_network_2eproto.base,
      &scc_info_DropOutLayer_network_2eproto.base,
      &scc_info_Activation_network_2eproto.base,}};

static void InitDefaultsscc_info_LinearLayer_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DeepNet::_LinearLayer_default_instance_;
    new (ptr) ::DeepNet::LinearLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeepNet::LinearLayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearLayer_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinearLayer_network_2eproto}, {}};

static void InitDefaultsscc_info_Network_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DeepNet::_Network_default_instance_;
    new (ptr) ::DeepNet::Network();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeepNet::Network::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Network_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Network_network_2eproto}, {
      &scc_info_Layer_network_2eproto.base,}};

static void InitDefaultsscc_info_PoolLayer2D_network_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DeepNet::_PoolLayer2D_default_instance_;
    new (ptr) ::DeepNet::PoolLayer2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeepNet::PoolLayer2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolLayer2D_network_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoolLayer2D_network_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_network_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_network_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_network_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_network_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, out_channels_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, in_channels_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, height_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, width_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, stride_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, padding_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, dilation_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, weight_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, bias_present_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::ConvLayer2D, bias_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::DeepNet::Activation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::Activation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeepNet::Activation, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::DeepNet::PoolLayer2D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::PoolLayer2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeepNet::PoolLayer2D, type_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::PoolLayer2D, kernel_size_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::PoolLayer2D, stride_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::PoolLayer2D, padding_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::PoolLayer2D, dilation_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::DeepNet::AdaptivePoolLayer2D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::AdaptivePoolLayer2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeepNet::AdaptivePoolLayer2D, type_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::AdaptivePoolLayer2D, out_x_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::AdaptivePoolLayer2D, out_y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::DeepNet::LinearLayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::LinearLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeepNet::LinearLayer, in_nodes_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::LinearLayer, out_nodes_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::LinearLayer, weight_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::LinearLayer, bias_present_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::LinearLayer, bias_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::DeepNet::DropOutLayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::DropOutLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeepNet::DropOutLayer, p_),
  0,
  PROTOBUF_FIELD_OFFSET(::DeepNet::Layer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::DeepNet::Layer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeepNet::Layer, type_),
  offsetof(::DeepNet::LayerDefaultTypeInternal, linear_),
  offsetof(::DeepNet::LayerDefaultTypeInternal, conv_),
  offsetof(::DeepNet::LayerDefaultTypeInternal, pool_),
  offsetof(::DeepNet::LayerDefaultTypeInternal, apool_),
  offsetof(::DeepNet::LayerDefaultTypeInternal, drop_),
  offsetof(::DeepNet::LayerDefaultTypeInternal, act_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::Layer, LayerComponent_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::DeepNet::Network, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::Network, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeepNet::Network, num_layers_),
  PROTOBUF_FIELD_OFFSET(::DeepNet::Network, layers_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::DeepNet::ConvLayer2D)},
  { 25, 31, sizeof(::DeepNet::Activation)},
  { 32, 42, sizeof(::DeepNet::PoolLayer2D)},
  { 47, 55, sizeof(::DeepNet::AdaptivePoolLayer2D)},
  { 58, 68, sizeof(::DeepNet::LinearLayer)},
  { 73, 79, sizeof(::DeepNet::DropOutLayer)},
  { 80, 93, sizeof(::DeepNet::Layer)},
  { 100, 107, sizeof(::DeepNet::Network)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DeepNet::_ConvLayer2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DeepNet::_Activation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DeepNet::_PoolLayer2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DeepNet::_AdaptivePoolLayer2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DeepNet::_LinearLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DeepNet::_DropOutLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DeepNet::_Layer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DeepNet::_Network_default_instance_),
};

const char descriptor_table_protodef_network_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rnetwork.proto\022\007DeepNet\"\305\001\n\013ConvLayer2D"
  "\022\024\n\014out_channels\030\002 \002(\005\022\023\n\013in_channels\030\003 "
  "\002(\005\022\016\n\006height\030\004 \002(\005\022\r\n\005width\030\005 \002(\005\022\016\n\006st"
  "ride\030\006 \002(\005\022\017\n\007padding\030\007 \002(\005\022\020\n\010dilation\030"
  "\010 \001(\005\022\016\n\006weight\030\t \003(\002\022\033\n\014bias_present\030\n "
  "\002(\010:\005false\022\014\n\004bias\030\013 \003(\002\"g\n\nActivation\0220"
  "\n\004type\030\001 \002(\0162\".DeepNet.Activation.Activa"
  "tionType\"\'\n\016ActivationType\022\010\n\004RELU\020\000\022\013\n\007"
  "SIGMOID\020\001\"\240\001\n\013PoolLayer2D\022+\n\004type\030\001 \002(\0162"
  "\035.DeepNet.PoolLayer2D.PoolType\022\023\n\013kernel"
  "_size\030\002 \002(\005\022\016\n\006stride\030\003 \002(\005\022\017\n\007padding\030\004"
  " \002(\005\022\020\n\010dilation\030\005 \002(\005\"\034\n\010PoolType\022\007\n\003MA"
  "X\020\000\022\007\n\003AVG\020\001\"\206\001\n\023AdaptivePoolLayer2D\0223\n\004"
  "type\030\001 \002(\0162%.DeepNet.AdaptivePoolLayer2D"
  ".PoolType\022\r\n\005out_x\030\002 \002(\005\022\r\n\005out_y\030\003 \002(\005\""
  "\034\n\010PoolType\022\007\n\003MAX\020\000\022\007\n\003AVG\020\001\"m\n\013LinearL"
  "ayer\022\020\n\010in_nodes\030\001 \002(\005\022\021\n\tout_nodes\030\002 \002("
  "\005\022\016\n\006weight\030\003 \003(\002\022\033\n\014bias_present\030\004 \002(\010:"
  "\005false\022\014\n\004bias\030\005 \003(\002\"\031\n\014DropOutLayer\022\t\n\001"
  "p\030\001 \002(\002\"\213\003\n\005Layer\022&\n\004type\030\001 \002(\0162\030.DeepNe"
  "t.Layer.LayerType\022&\n\006linear\030\002 \001(\0132\024.Deep"
  "Net.LinearLayerH\000\022$\n\004conv\030\003 \001(\0132\024.DeepNe"
  "t.ConvLayer2DH\000\022$\n\004pool\030\004 \001(\0132\024.DeepNet."
  "PoolLayer2DH\000\022-\n\005apool\030\005 \001(\0132\034.DeepNet.A"
  "daptivePoolLayer2DH\000\022%\n\004drop\030\006 \001(\0132\025.Dee"
  "pNet.DropOutLayerH\000\022\"\n\003act\030\007 \001(\0132\023.DeepN"
  "et.ActivationH\000\"Z\n\tLayerType\022\n\n\006LINEAR\020\000"
  "\022\010\n\004CONV\020\001\022\010\n\004POOL\020\002\022\021\n\rADAPTIVE_POOL\020\003\022"
  "\n\n\006DROPUT\020\004\022\016\n\nACTIVATION\020\005B\020\n\016LayerComp"
  "onent\"=\n\007Network\022\022\n\nnum_layers\030\001 \002(\005\022\036\n\006"
  "layers\030\002 \003(\0132\016.DeepNet.Layer"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_network_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_network_2eproto_sccs[8] = {
  &scc_info_Activation_network_2eproto.base,
  &scc_info_AdaptivePoolLayer2D_network_2eproto.base,
  &scc_info_ConvLayer2D_network_2eproto.base,
  &scc_info_DropOutLayer_network_2eproto.base,
  &scc_info_Layer_network_2eproto.base,
  &scc_info_LinearLayer_network_2eproto.base,
  &scc_info_Network_network_2eproto.base,
  &scc_info_PoolLayer2D_network_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_network_2eproto_once;
static bool descriptor_table_network_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto = {
  &descriptor_table_network_2eproto_initialized, descriptor_table_protodef_network_2eproto, "network.proto", 1228,
  &descriptor_table_network_2eproto_once, descriptor_table_network_2eproto_sccs, descriptor_table_network_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_network_2eproto::offsets,
  file_level_metadata_network_2eproto, 8, file_level_enum_descriptors_network_2eproto, file_level_service_descriptors_network_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_network_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_network_2eproto), true);
namespace DeepNet {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Activation_ActivationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_2eproto);
  return file_level_enum_descriptors_network_2eproto[0];
}
bool Activation_ActivationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Activation_ActivationType Activation::RELU;
constexpr Activation_ActivationType Activation::SIGMOID;
constexpr Activation_ActivationType Activation::ActivationType_MIN;
constexpr Activation_ActivationType Activation::ActivationType_MAX;
constexpr int Activation::ActivationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolLayer2D_PoolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_2eproto);
  return file_level_enum_descriptors_network_2eproto[1];
}
bool PoolLayer2D_PoolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PoolLayer2D_PoolType PoolLayer2D::MAX;
constexpr PoolLayer2D_PoolType PoolLayer2D::AVG;
constexpr PoolLayer2D_PoolType PoolLayer2D::PoolType_MIN;
constexpr PoolLayer2D_PoolType PoolLayer2D::PoolType_MAX;
constexpr int PoolLayer2D::PoolType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdaptivePoolLayer2D_PoolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_2eproto);
  return file_level_enum_descriptors_network_2eproto[2];
}
bool AdaptivePoolLayer2D_PoolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AdaptivePoolLayer2D_PoolType AdaptivePoolLayer2D::MAX;
constexpr AdaptivePoolLayer2D_PoolType AdaptivePoolLayer2D::AVG;
constexpr AdaptivePoolLayer2D_PoolType AdaptivePoolLayer2D::PoolType_MIN;
constexpr AdaptivePoolLayer2D_PoolType AdaptivePoolLayer2D::PoolType_MAX;
constexpr int AdaptivePoolLayer2D::PoolType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Layer_LayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_2eproto);
  return file_level_enum_descriptors_network_2eproto[3];
}
bool Layer_LayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Layer_LayerType Layer::LINEAR;
constexpr Layer_LayerType Layer::CONV;
constexpr Layer_LayerType Layer::POOL;
constexpr Layer_LayerType Layer::ADAPTIVE_POOL;
constexpr Layer_LayerType Layer::DROPUT;
constexpr Layer_LayerType Layer::ACTIVATION;
constexpr Layer_LayerType Layer::LayerType_MIN;
constexpr Layer_LayerType Layer::LayerType_MAX;
constexpr int Layer::LayerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ConvLayer2D::InitAsDefaultInstance() {
}
class ConvLayer2D::_Internal {
 public:
  using HasBits = decltype(std::declval<ConvLayer2D>()._has_bits_);
  static void set_has_out_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dilation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bias_present(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ConvLayer2D::ConvLayer2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeepNet.ConvLayer2D)
}
ConvLayer2D::ConvLayer2D(const ConvLayer2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      weight_(from.weight_),
      bias_(from.bias_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&out_channels_, &from.out_channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&bias_present_) -
    reinterpret_cast<char*>(&out_channels_)) + sizeof(bias_present_));
  // @@protoc_insertion_point(copy_constructor:DeepNet.ConvLayer2D)
}

void ConvLayer2D::SharedCtor() {
  ::memset(&out_channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bias_present_) -
      reinterpret_cast<char*>(&out_channels_)) + sizeof(bias_present_));
}

ConvLayer2D::~ConvLayer2D() {
  // @@protoc_insertion_point(destructor:DeepNet.ConvLayer2D)
  SharedDtor();
}

void ConvLayer2D::SharedDtor() {
}

void ConvLayer2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvLayer2D& ConvLayer2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvLayer2D_network_2eproto.base);
  return *internal_default_instance();
}


void ConvLayer2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DeepNet.ConvLayer2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_.Clear();
  bias_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&out_channels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bias_present_) -
        reinterpret_cast<char*>(&out_channels_)) + sizeof(bias_present_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConvLayer2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 out_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_out_channels(&has_bits);
          out_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 in_channels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_in_channels(&has_bits);
          in_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 stride = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 padding = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_padding(&has_bits);
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dilation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_dilation(&has_bits);
          dilation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_weight(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool bias_present = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_bias_present(&has_bits);
          bias_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float bias = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bias(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvLayer2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeepNet.ConvLayer2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 out_channels = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_out_channels(), target);
  }

  // required int32 in_channels = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_in_channels(), target);
  }

  // required int32 height = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // required int32 width = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_width(), target);
  }

  // required int32 stride = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_stride(), target);
  }

  // required int32 padding = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_padding(), target);
  }

  // optional int32 dilation = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_dilation(), target);
  }

  // repeated float weight = 9;
  for (int i = 0, n = this->_internal_weight_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_weight(i), target);
  }

  // required bool bias_present = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_bias_present(), target);
  }

  // repeated float bias = 11;
  for (int i = 0, n = this->_internal_bias_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_bias(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeepNet.ConvLayer2D)
  return target;
}

size_t ConvLayer2D::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DeepNet.ConvLayer2D)
  size_t total_size = 0;

  if (_internal_has_out_channels()) {
    // required int32 out_channels = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_channels());
  }

  if (_internal_has_in_channels()) {
    // required int32 in_channels = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_in_channels());
  }

  if (_internal_has_height()) {
    // required int32 height = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (_internal_has_width()) {
    // required int32 width = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  if (_internal_has_stride()) {
    // required int32 stride = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stride());
  }

  if (_internal_has_padding()) {
    // required int32 padding = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_padding());
  }

  if (_internal_has_bias_present()) {
    // required bool bias_present = 10 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ConvLayer2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeepNet.ConvLayer2D)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000bf) ^ 0x000000bf) == 0) {  // All required fields are present.
    // required int32 out_channels = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_channels());

    // required int32 in_channels = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_in_channels());

    // required int32 height = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());

    // required int32 width = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());

    // required int32 stride = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stride());

    // required int32 padding = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_padding());

    // required bool bias_present = 10 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float weight = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weight_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_weight_size());
    total_size += data_size;
  }

  // repeated float bias = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bias_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bias_size());
    total_size += data_size;
  }

  // optional int32 dilation = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dilation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvLayer2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeepNet.ConvLayer2D)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvLayer2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvLayer2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeepNet.ConvLayer2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeepNet.ConvLayer2D)
    MergeFrom(*source);
  }
}

void ConvLayer2D::MergeFrom(const ConvLayer2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeepNet.ConvLayer2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_.MergeFrom(from.weight_);
  bias_.MergeFrom(from.bias_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      out_channels_ = from.out_channels_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_channels_ = from.in_channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      stride_ = from.stride_;
    }
    if (cached_has_bits & 0x00000020u) {
      padding_ = from.padding_;
    }
    if (cached_has_bits & 0x00000040u) {
      dilation_ = from.dilation_;
    }
    if (cached_has_bits & 0x00000080u) {
      bias_present_ = from.bias_present_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConvLayer2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeepNet.ConvLayer2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvLayer2D::CopyFrom(const ConvLayer2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeepNet.ConvLayer2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvLayer2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000bf) != 0x000000bf) return false;
  return true;
}

void ConvLayer2D::InternalSwap(ConvLayer2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  weight_.InternalSwap(&other->weight_);
  bias_.InternalSwap(&other->bias_);
  swap(out_channels_, other->out_channels_);
  swap(in_channels_, other->in_channels_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(stride_, other->stride_);
  swap(padding_, other->padding_);
  swap(dilation_, other->dilation_);
  swap(bias_present_, other->bias_present_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvLayer2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Activation::InitAsDefaultInstance() {
}
class Activation::_Internal {
 public:
  using HasBits = decltype(std::declval<Activation>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Activation::Activation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeepNet.Activation)
}
Activation::Activation(const Activation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:DeepNet.Activation)
}

void Activation::SharedCtor() {
  type_ = 0;
}

Activation::~Activation() {
  // @@protoc_insertion_point(destructor:DeepNet.Activation)
  SharedDtor();
}

void Activation::SharedDtor() {
}

void Activation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Activation& Activation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Activation_network_2eproto.base);
  return *internal_default_instance();
}


void Activation::Clear() {
// @@protoc_insertion_point(message_clear_start:DeepNet.Activation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Activation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .DeepNet.Activation.ActivationType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DeepNet::Activation_ActivationType_IsValid(val))) {
            _internal_set_type(static_cast<::DeepNet::Activation_ActivationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Activation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeepNet.Activation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .DeepNet.Activation.ActivationType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeepNet.Activation)
  return target;
}

size_t Activation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeepNet.Activation)
  size_t total_size = 0;

  // required .DeepNet.Activation.ActivationType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Activation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeepNet.Activation)
  GOOGLE_DCHECK_NE(&from, this);
  const Activation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Activation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeepNet.Activation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeepNet.Activation)
    MergeFrom(*source);
  }
}

void Activation::MergeFrom(const Activation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeepNet.Activation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void Activation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeepNet.Activation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activation::CopyFrom(const Activation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeepNet.Activation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Activation::InternalSwap(Activation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Activation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoolLayer2D::InitAsDefaultInstance() {
}
class PoolLayer2D::_Internal {
 public:
  using HasBits = decltype(std::declval<PoolLayer2D>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dilation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PoolLayer2D::PoolLayer2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeepNet.PoolLayer2D)
}
PoolLayer2D::PoolLayer2D(const PoolLayer2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&dilation_) -
    reinterpret_cast<char*>(&type_)) + sizeof(dilation_));
  // @@protoc_insertion_point(copy_constructor:DeepNet.PoolLayer2D)
}

void PoolLayer2D::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dilation_) -
      reinterpret_cast<char*>(&type_)) + sizeof(dilation_));
}

PoolLayer2D::~PoolLayer2D() {
  // @@protoc_insertion_point(destructor:DeepNet.PoolLayer2D)
  SharedDtor();
}

void PoolLayer2D::SharedDtor() {
}

void PoolLayer2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoolLayer2D& PoolLayer2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoolLayer2D_network_2eproto.base);
  return *internal_default_instance();
}


void PoolLayer2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DeepNet.PoolLayer2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dilation_) -
        reinterpret_cast<char*>(&type_)) + sizeof(dilation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PoolLayer2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .DeepNet.PoolLayer2D.PoolType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DeepNet::PoolLayer2D_PoolType_IsValid(val))) {
            _internal_set_type(static_cast<::DeepNet::PoolLayer2D_PoolType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 kernel_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kernel_size(&has_bits);
          kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 stride = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 padding = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_padding(&has_bits);
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 dilation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dilation(&has_bits);
          dilation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoolLayer2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeepNet.PoolLayer2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .DeepNet.PoolLayer2D.PoolType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required int32 kernel_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_kernel_size(), target);
  }

  // required int32 stride = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_stride(), target);
  }

  // required int32 padding = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_padding(), target);
  }

  // required int32 dilation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_dilation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeepNet.PoolLayer2D)
  return target;
}

size_t PoolLayer2D::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DeepNet.PoolLayer2D)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .DeepNet.PoolLayer2D.PoolType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_kernel_size()) {
    // required int32 kernel_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kernel_size());
  }

  if (_internal_has_stride()) {
    // required int32 stride = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stride());
  }

  if (_internal_has_padding()) {
    // required int32 padding = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_padding());
  }

  if (_internal_has_dilation()) {
    // required int32 dilation = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dilation());
  }

  return total_size;
}
size_t PoolLayer2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeepNet.PoolLayer2D)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .DeepNet.PoolLayer2D.PoolType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required int32 kernel_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kernel_size());

    // required int32 stride = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stride());

    // required int32 padding = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_padding());

    // required int32 dilation = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dilation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoolLayer2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeepNet.PoolLayer2D)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolLayer2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoolLayer2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeepNet.PoolLayer2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeepNet.PoolLayer2D)
    MergeFrom(*source);
  }
}

void PoolLayer2D::MergeFrom(const PoolLayer2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeepNet.PoolLayer2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      stride_ = from.stride_;
    }
    if (cached_has_bits & 0x00000008u) {
      padding_ = from.padding_;
    }
    if (cached_has_bits & 0x00000010u) {
      dilation_ = from.dilation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoolLayer2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeepNet.PoolLayer2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolLayer2D::CopyFrom(const PoolLayer2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeepNet.PoolLayer2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolLayer2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void PoolLayer2D::InternalSwap(PoolLayer2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(kernel_size_, other->kernel_size_);
  swap(stride_, other->stride_);
  swap(padding_, other->padding_);
  swap(dilation_, other->dilation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolLayer2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdaptivePoolLayer2D::InitAsDefaultInstance() {
}
class AdaptivePoolLayer2D::_Internal {
 public:
  using HasBits = decltype(std::declval<AdaptivePoolLayer2D>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_out_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_out_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AdaptivePoolLayer2D::AdaptivePoolLayer2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeepNet.AdaptivePoolLayer2D)
}
AdaptivePoolLayer2D::AdaptivePoolLayer2D(const AdaptivePoolLayer2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_y_) -
    reinterpret_cast<char*>(&type_)) + sizeof(out_y_));
  // @@protoc_insertion_point(copy_constructor:DeepNet.AdaptivePoolLayer2D)
}

void AdaptivePoolLayer2D::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_y_) -
      reinterpret_cast<char*>(&type_)) + sizeof(out_y_));
}

AdaptivePoolLayer2D::~AdaptivePoolLayer2D() {
  // @@protoc_insertion_point(destructor:DeepNet.AdaptivePoolLayer2D)
  SharedDtor();
}

void AdaptivePoolLayer2D::SharedDtor() {
}

void AdaptivePoolLayer2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdaptivePoolLayer2D& AdaptivePoolLayer2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdaptivePoolLayer2D_network_2eproto.base);
  return *internal_default_instance();
}


void AdaptivePoolLayer2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DeepNet.AdaptivePoolLayer2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&out_y_) -
        reinterpret_cast<char*>(&type_)) + sizeof(out_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AdaptivePoolLayer2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .DeepNet.AdaptivePoolLayer2D.PoolType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DeepNet::AdaptivePoolLayer2D_PoolType_IsValid(val))) {
            _internal_set_type(static_cast<::DeepNet::AdaptivePoolLayer2D_PoolType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 out_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_out_x(&has_bits);
          out_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 out_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_out_y(&has_bits);
          out_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdaptivePoolLayer2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeepNet.AdaptivePoolLayer2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .DeepNet.AdaptivePoolLayer2D.PoolType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required int32 out_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_out_x(), target);
  }

  // required int32 out_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_out_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeepNet.AdaptivePoolLayer2D)
  return target;
}

size_t AdaptivePoolLayer2D::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DeepNet.AdaptivePoolLayer2D)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .DeepNet.AdaptivePoolLayer2D.PoolType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_out_x()) {
    // required int32 out_x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_x());
  }

  if (_internal_has_out_y()) {
    // required int32 out_y = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_y());
  }

  return total_size;
}
size_t AdaptivePoolLayer2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeepNet.AdaptivePoolLayer2D)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .DeepNet.AdaptivePoolLayer2D.PoolType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required int32 out_x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_x());

    // required int32 out_y = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdaptivePoolLayer2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeepNet.AdaptivePoolLayer2D)
  GOOGLE_DCHECK_NE(&from, this);
  const AdaptivePoolLayer2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdaptivePoolLayer2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeepNet.AdaptivePoolLayer2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeepNet.AdaptivePoolLayer2D)
    MergeFrom(*source);
  }
}

void AdaptivePoolLayer2D::MergeFrom(const AdaptivePoolLayer2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeepNet.AdaptivePoolLayer2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      out_x_ = from.out_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      out_y_ = from.out_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdaptivePoolLayer2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeepNet.AdaptivePoolLayer2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaptivePoolLayer2D::CopyFrom(const AdaptivePoolLayer2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeepNet.AdaptivePoolLayer2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaptivePoolLayer2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void AdaptivePoolLayer2D::InternalSwap(AdaptivePoolLayer2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(out_x_, other->out_x_);
  swap(out_y_, other->out_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdaptivePoolLayer2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinearLayer::InitAsDefaultInstance() {
}
class LinearLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearLayer>()._has_bits_);
  static void set_has_in_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_out_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bias_present(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LinearLayer::LinearLayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeepNet.LinearLayer)
}
LinearLayer::LinearLayer(const LinearLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      weight_(from.weight_),
      bias_(from.bias_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&in_nodes_, &from.in_nodes_,
    static_cast<size_t>(reinterpret_cast<char*>(&bias_present_) -
    reinterpret_cast<char*>(&in_nodes_)) + sizeof(bias_present_));
  // @@protoc_insertion_point(copy_constructor:DeepNet.LinearLayer)
}

void LinearLayer::SharedCtor() {
  ::memset(&in_nodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bias_present_) -
      reinterpret_cast<char*>(&in_nodes_)) + sizeof(bias_present_));
}

LinearLayer::~LinearLayer() {
  // @@protoc_insertion_point(destructor:DeepNet.LinearLayer)
  SharedDtor();
}

void LinearLayer::SharedDtor() {
}

void LinearLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearLayer& LinearLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinearLayer_network_2eproto.base);
  return *internal_default_instance();
}


void LinearLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:DeepNet.LinearLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_.Clear();
  bias_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&in_nodes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bias_present_) -
        reinterpret_cast<char*>(&in_nodes_)) + sizeof(bias_present_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LinearLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 in_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_in_nodes(&has_bits);
          in_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 out_nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_out_nodes(&has_bits);
          out_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_weight(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool bias_present = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bias_present(&has_bits);
          bias_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float bias = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bias(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeepNet.LinearLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 in_nodes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_in_nodes(), target);
  }

  // required int32 out_nodes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_out_nodes(), target);
  }

  // repeated float weight = 3;
  for (int i = 0, n = this->_internal_weight_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_weight(i), target);
  }

  // required bool bias_present = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bias_present(), target);
  }

  // repeated float bias = 5;
  for (int i = 0, n = this->_internal_bias_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_bias(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeepNet.LinearLayer)
  return target;
}

size_t LinearLayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DeepNet.LinearLayer)
  size_t total_size = 0;

  if (_internal_has_in_nodes()) {
    // required int32 in_nodes = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_in_nodes());
  }

  if (_internal_has_out_nodes()) {
    // required int32 out_nodes = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_nodes());
  }

  if (_internal_has_bias_present()) {
    // required bool bias_present = 4 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LinearLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeepNet.LinearLayer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 in_nodes = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_in_nodes());

    // required int32 out_nodes = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_nodes());

    // required bool bias_present = 4 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float weight = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weight_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_weight_size());
    total_size += data_size;
  }

  // repeated float bias = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bias_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bias_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearLayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeepNet.LinearLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearLayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearLayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeepNet.LinearLayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeepNet.LinearLayer)
    MergeFrom(*source);
  }
}

void LinearLayer::MergeFrom(const LinearLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeepNet.LinearLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_.MergeFrom(from.weight_);
  bias_.MergeFrom(from.bias_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      in_nodes_ = from.in_nodes_;
    }
    if (cached_has_bits & 0x00000002u) {
      out_nodes_ = from.out_nodes_;
    }
    if (cached_has_bits & 0x00000004u) {
      bias_present_ = from.bias_present_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinearLayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeepNet.LinearLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearLayer::CopyFrom(const LinearLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeepNet.LinearLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearLayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void LinearLayer::InternalSwap(LinearLayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  weight_.InternalSwap(&other->weight_);
  bias_.InternalSwap(&other->bias_);
  swap(in_nodes_, other->in_nodes_);
  swap(out_nodes_, other->out_nodes_);
  swap(bias_present_, other->bias_present_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearLayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropOutLayer::InitAsDefaultInstance() {
}
class DropOutLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<DropOutLayer>()._has_bits_);
  static void set_has_p(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DropOutLayer::DropOutLayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeepNet.DropOutLayer)
}
DropOutLayer::DropOutLayer(const DropOutLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  p_ = from.p_;
  // @@protoc_insertion_point(copy_constructor:DeepNet.DropOutLayer)
}

void DropOutLayer::SharedCtor() {
  p_ = 0;
}

DropOutLayer::~DropOutLayer() {
  // @@protoc_insertion_point(destructor:DeepNet.DropOutLayer)
  SharedDtor();
}

void DropOutLayer::SharedDtor() {
}

void DropOutLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropOutLayer& DropOutLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropOutLayer_network_2eproto.base);
  return *internal_default_instance();
}


void DropOutLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:DeepNet.DropOutLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DropOutLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_p(&has_bits);
          p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropOutLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeepNet.DropOutLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float p = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_p(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeepNet.DropOutLayer)
  return target;
}

size_t DropOutLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeepNet.DropOutLayer)
  size_t total_size = 0;

  // required float p = 1;
  if (_internal_has_p()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropOutLayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeepNet.DropOutLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const DropOutLayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropOutLayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeepNet.DropOutLayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeepNet.DropOutLayer)
    MergeFrom(*source);
  }
}

void DropOutLayer::MergeFrom(const DropOutLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeepNet.DropOutLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_p()) {
    _internal_set_p(from._internal_p());
  }
}

void DropOutLayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeepNet.DropOutLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropOutLayer::CopyFrom(const DropOutLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeepNet.DropOutLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropOutLayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DropOutLayer::InternalSwap(DropOutLayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(p_, other->p_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropOutLayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Layer::InitAsDefaultInstance() {
  ::DeepNet::_Layer_default_instance_.linear_ = const_cast< ::DeepNet::LinearLayer*>(
      ::DeepNet::LinearLayer::internal_default_instance());
  ::DeepNet::_Layer_default_instance_.conv_ = const_cast< ::DeepNet::ConvLayer2D*>(
      ::DeepNet::ConvLayer2D::internal_default_instance());
  ::DeepNet::_Layer_default_instance_.pool_ = const_cast< ::DeepNet::PoolLayer2D*>(
      ::DeepNet::PoolLayer2D::internal_default_instance());
  ::DeepNet::_Layer_default_instance_.apool_ = const_cast< ::DeepNet::AdaptivePoolLayer2D*>(
      ::DeepNet::AdaptivePoolLayer2D::internal_default_instance());
  ::DeepNet::_Layer_default_instance_.drop_ = const_cast< ::DeepNet::DropOutLayer*>(
      ::DeepNet::DropOutLayer::internal_default_instance());
  ::DeepNet::_Layer_default_instance_.act_ = const_cast< ::DeepNet::Activation*>(
      ::DeepNet::Activation::internal_default_instance());
}
class Layer::_Internal {
 public:
  using HasBits = decltype(std::declval<Layer>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::DeepNet::LinearLayer& linear(const Layer* msg);
  static const ::DeepNet::ConvLayer2D& conv(const Layer* msg);
  static const ::DeepNet::PoolLayer2D& pool(const Layer* msg);
  static const ::DeepNet::AdaptivePoolLayer2D& apool(const Layer* msg);
  static const ::DeepNet::DropOutLayer& drop(const Layer* msg);
  static const ::DeepNet::Activation& act(const Layer* msg);
};

const ::DeepNet::LinearLayer&
Layer::_Internal::linear(const Layer* msg) {
  return *msg->LayerComponent_.linear_;
}
const ::DeepNet::ConvLayer2D&
Layer::_Internal::conv(const Layer* msg) {
  return *msg->LayerComponent_.conv_;
}
const ::DeepNet::PoolLayer2D&
Layer::_Internal::pool(const Layer* msg) {
  return *msg->LayerComponent_.pool_;
}
const ::DeepNet::AdaptivePoolLayer2D&
Layer::_Internal::apool(const Layer* msg) {
  return *msg->LayerComponent_.apool_;
}
const ::DeepNet::DropOutLayer&
Layer::_Internal::drop(const Layer* msg) {
  return *msg->LayerComponent_.drop_;
}
const ::DeepNet::Activation&
Layer::_Internal::act(const Layer* msg) {
  return *msg->LayerComponent_.act_;
}
void Layer::set_allocated_linear(::DeepNet::LinearLayer* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_LayerComponent();
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    set_has_linear();
    LayerComponent_.linear_ = linear;
  }
  // @@protoc_insertion_point(field_set_allocated:DeepNet.Layer.linear)
}
void Layer::set_allocated_conv(::DeepNet::ConvLayer2D* conv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_LayerComponent();
  if (conv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv, submessage_arena);
    }
    set_has_conv();
    LayerComponent_.conv_ = conv;
  }
  // @@protoc_insertion_point(field_set_allocated:DeepNet.Layer.conv)
}
void Layer::set_allocated_pool(::DeepNet::PoolLayer2D* pool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_LayerComponent();
  if (pool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pool, submessage_arena);
    }
    set_has_pool();
    LayerComponent_.pool_ = pool;
  }
  // @@protoc_insertion_point(field_set_allocated:DeepNet.Layer.pool)
}
void Layer::set_allocated_apool(::DeepNet::AdaptivePoolLayer2D* apool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_LayerComponent();
  if (apool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apool, submessage_arena);
    }
    set_has_apool();
    LayerComponent_.apool_ = apool;
  }
  // @@protoc_insertion_point(field_set_allocated:DeepNet.Layer.apool)
}
void Layer::set_allocated_drop(::DeepNet::DropOutLayer* drop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_LayerComponent();
  if (drop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      drop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop, submessage_arena);
    }
    set_has_drop();
    LayerComponent_.drop_ = drop;
  }
  // @@protoc_insertion_point(field_set_allocated:DeepNet.Layer.drop)
}
void Layer::set_allocated_act(::DeepNet::Activation* act) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_LayerComponent();
  if (act) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      act = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, act, submessage_arena);
    }
    set_has_act();
    LayerComponent_.act_ = act;
  }
  // @@protoc_insertion_point(field_set_allocated:DeepNet.Layer.act)
}
Layer::Layer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeepNet.Layer)
}
Layer::Layer(const Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_LayerComponent();
  switch (from.LayerComponent_case()) {
    case kLinear: {
      _internal_mutable_linear()->::DeepNet::LinearLayer::MergeFrom(from._internal_linear());
      break;
    }
    case kConv: {
      _internal_mutable_conv()->::DeepNet::ConvLayer2D::MergeFrom(from._internal_conv());
      break;
    }
    case kPool: {
      _internal_mutable_pool()->::DeepNet::PoolLayer2D::MergeFrom(from._internal_pool());
      break;
    }
    case kApool: {
      _internal_mutable_apool()->::DeepNet::AdaptivePoolLayer2D::MergeFrom(from._internal_apool());
      break;
    }
    case kDrop: {
      _internal_mutable_drop()->::DeepNet::DropOutLayer::MergeFrom(from._internal_drop());
      break;
    }
    case kAct: {
      _internal_mutable_act()->::DeepNet::Activation::MergeFrom(from._internal_act());
      break;
    }
    case LAYERCOMPONENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:DeepNet.Layer)
}

void Layer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Layer_network_2eproto.base);
  type_ = 0;
  clear_has_LayerComponent();
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:DeepNet.Layer)
  SharedDtor();
}

void Layer::SharedDtor() {
  if (has_LayerComponent()) {
    clear_LayerComponent();
  }
}

void Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Layer& Layer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Layer_network_2eproto.base);
  return *internal_default_instance();
}


void Layer::clear_LayerComponent() {
// @@protoc_insertion_point(one_of_clear_start:DeepNet.Layer)
  switch (LayerComponent_case()) {
    case kLinear: {
      delete LayerComponent_.linear_;
      break;
    }
    case kConv: {
      delete LayerComponent_.conv_;
      break;
    }
    case kPool: {
      delete LayerComponent_.pool_;
      break;
    }
    case kApool: {
      delete LayerComponent_.apool_;
      break;
    }
    case kDrop: {
      delete LayerComponent_.drop_;
      break;
    }
    case kAct: {
      delete LayerComponent_.act_;
      break;
    }
    case LAYERCOMPONENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LAYERCOMPONENT_NOT_SET;
}


void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:DeepNet.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_LayerComponent();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Layer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .DeepNet.Layer.LayerType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DeepNet::Layer_LayerType_IsValid(val))) {
            _internal_set_type(static_cast<::DeepNet::Layer_LayerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .DeepNet.LinearLayer linear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DeepNet.ConvLayer2D conv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DeepNet.PoolLayer2D pool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DeepNet.AdaptivePoolLayer2D apool = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_apool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DeepNet.DropOutLayer drop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DeepNet.Activation act = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_act(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Layer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeepNet.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .DeepNet.Layer.LayerType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  switch (LayerComponent_case()) {
    case kLinear: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::linear(this), target, stream);
      break;
    }
    case kConv: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::conv(this), target, stream);
      break;
    }
    case kPool: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::pool(this), target, stream);
      break;
    }
    case kApool: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::apool(this), target, stream);
      break;
    }
    case kDrop: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::drop(this), target, stream);
      break;
    }
    case kAct: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::act(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeepNet.Layer)
  return target;
}

size_t Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeepNet.Layer)
  size_t total_size = 0;

  // required .DeepNet.Layer.LayerType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (LayerComponent_case()) {
    // optional .DeepNet.LinearLayer linear = 2;
    case kLinear: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *LayerComponent_.linear_);
      break;
    }
    // optional .DeepNet.ConvLayer2D conv = 3;
    case kConv: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *LayerComponent_.conv_);
      break;
    }
    // optional .DeepNet.PoolLayer2D pool = 4;
    case kPool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *LayerComponent_.pool_);
      break;
    }
    // optional .DeepNet.AdaptivePoolLayer2D apool = 5;
    case kApool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *LayerComponent_.apool_);
      break;
    }
    // optional .DeepNet.DropOutLayer drop = 6;
    case kDrop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *LayerComponent_.drop_);
      break;
    }
    // optional .DeepNet.Activation act = 7;
    case kAct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *LayerComponent_.act_);
      break;
    }
    case LAYERCOMPONENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Layer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeepNet.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  const Layer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Layer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeepNet.Layer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeepNet.Layer)
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeepNet.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  switch (from.LayerComponent_case()) {
    case kLinear: {
      _internal_mutable_linear()->::DeepNet::LinearLayer::MergeFrom(from._internal_linear());
      break;
    }
    case kConv: {
      _internal_mutable_conv()->::DeepNet::ConvLayer2D::MergeFrom(from._internal_conv());
      break;
    }
    case kPool: {
      _internal_mutable_pool()->::DeepNet::PoolLayer2D::MergeFrom(from._internal_pool());
      break;
    }
    case kApool: {
      _internal_mutable_apool()->::DeepNet::AdaptivePoolLayer2D::MergeFrom(from._internal_apool());
      break;
    }
    case kDrop: {
      _internal_mutable_drop()->::DeepNet::DropOutLayer::MergeFrom(from._internal_drop());
      break;
    }
    case kAct: {
      _internal_mutable_act()->::DeepNet::Activation::MergeFrom(from._internal_act());
      break;
    }
    case LAYERCOMPONENT_NOT_SET: {
      break;
    }
  }
}

void Layer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeepNet.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeepNet.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (LayerComponent_case()) {
    case kLinear: {
      if (has_linear()) {
        if (!this->linear().IsInitialized()) return false;
      }
      break;
    }
    case kConv: {
      if (has_conv()) {
        if (!this->conv().IsInitialized()) return false;
      }
      break;
    }
    case kPool: {
      if (has_pool()) {
        if (!this->pool().IsInitialized()) return false;
      }
      break;
    }
    case kApool: {
      if (has_apool()) {
        if (!this->apool().IsInitialized()) return false;
      }
      break;
    }
    case kDrop: {
      if (has_drop()) {
        if (!this->drop().IsInitialized()) return false;
      }
      break;
    }
    case kAct: {
      if (has_act()) {
        if (!this->act().IsInitialized()) return false;
      }
      break;
    }
    case LAYERCOMPONENT_NOT_SET: {
      break;
    }
  }
  return true;
}

void Layer::InternalSwap(Layer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(LayerComponent_, other->LayerComponent_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Layer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Network::InitAsDefaultInstance() {
}
class Network::_Internal {
 public:
  using HasBits = decltype(std::declval<Network>()._has_bits_);
  static void set_has_num_layers(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Network::Network()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeepNet.Network)
}
Network::Network(const Network& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_layers_ = from.num_layers_;
  // @@protoc_insertion_point(copy_constructor:DeepNet.Network)
}

void Network::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Network_network_2eproto.base);
  num_layers_ = 0;
}

Network::~Network() {
  // @@protoc_insertion_point(destructor:DeepNet.Network)
  SharedDtor();
}

void Network::SharedDtor() {
}

void Network::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Network& Network::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Network_network_2eproto.base);
  return *internal_default_instance();
}


void Network::Clear() {
// @@protoc_insertion_point(message_clear_start:DeepNet.Network)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  num_layers_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Network::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 num_layers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_layers(&has_bits);
          num_layers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DeepNet.Layer layers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Network::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeepNet.Network)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num_layers = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_layers(), target);
  }

  // repeated .DeepNet.Layer layers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_layers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeepNet.Network)
  return target;
}

size_t Network::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeepNet.Network)
  size_t total_size = 0;

  // required int32 num_layers = 1;
  if (_internal_has_num_layers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_layers());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DeepNet.Layer layers = 2;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Network::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeepNet.Network)
  GOOGLE_DCHECK_NE(&from, this);
  const Network* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Network>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeepNet.Network)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeepNet.Network)
    MergeFrom(*source);
  }
}

void Network::MergeFrom(const Network& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeepNet.Network)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  if (from._internal_has_num_layers()) {
    _internal_set_num_layers(from._internal_num_layers());
  }
}

void Network::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeepNet.Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Network::CopyFrom(const Network& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeepNet.Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(layers_)) return false;
  return true;
}

void Network::InternalSwap(Network* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layers_.InternalSwap(&other->layers_);
  swap(num_layers_, other->num_layers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Network::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DeepNet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DeepNet::ConvLayer2D* Arena::CreateMaybeMessage< ::DeepNet::ConvLayer2D >(Arena* arena) {
  return Arena::CreateInternal< ::DeepNet::ConvLayer2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DeepNet::Activation* Arena::CreateMaybeMessage< ::DeepNet::Activation >(Arena* arena) {
  return Arena::CreateInternal< ::DeepNet::Activation >(arena);
}
template<> PROTOBUF_NOINLINE ::DeepNet::PoolLayer2D* Arena::CreateMaybeMessage< ::DeepNet::PoolLayer2D >(Arena* arena) {
  return Arena::CreateInternal< ::DeepNet::PoolLayer2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DeepNet::AdaptivePoolLayer2D* Arena::CreateMaybeMessage< ::DeepNet::AdaptivePoolLayer2D >(Arena* arena) {
  return Arena::CreateInternal< ::DeepNet::AdaptivePoolLayer2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DeepNet::LinearLayer* Arena::CreateMaybeMessage< ::DeepNet::LinearLayer >(Arena* arena) {
  return Arena::CreateInternal< ::DeepNet::LinearLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::DeepNet::DropOutLayer* Arena::CreateMaybeMessage< ::DeepNet::DropOutLayer >(Arena* arena) {
  return Arena::CreateInternal< ::DeepNet::DropOutLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::DeepNet::Layer* Arena::CreateMaybeMessage< ::DeepNet::Layer >(Arena* arena) {
  return Arena::CreateInternal< ::DeepNet::Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::DeepNet::Network* Arena::CreateMaybeMessage< ::DeepNet::Network >(Arena* arena) {
  return Arena::CreateInternal< ::DeepNet::Network >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
